import Head from 'next/head';
import Link from 'next/link';

// Components
import Section, {SectionHeader} from '../components/Section';

// Utilities
import {readdirSync} from 'fs';
import {resolve} from 'path';


export default function All(props: {paths: string[]}) {
    return (
        <div>
            <Head>
                <title>All | ky28059.github.io</title>
                <meta name="description" content="A directory of every page on this website." />
            </Head>

            <Section>
                <SectionHeader>All</SectionHeader>
                <p className="mb-8 max-w-prose">
                    This page was automatically generated by <code>getStaticProps</code>. Below is a list of all valid
                    subpages of this website, created from recursively parsing TSX files and subdirectories in <code>./pages</code>.
                </p>

                <section className="flex flex-col gap-2">
                    {props.paths.map(path => (
                        <Link href={path}>
                            <a className="text-gray-400">{path}</a>
                        </Link>
                    ))}
                </section>
            </Section>
        </div>
    )
}

// Recursively fetch all files in `./pages`, standardizing slashes, normalizing absolute paths to relative paths, handling
// `index.tsx`, and removing `_app.tsx`, `_document.tsx`, and `404.tsx`.
export async function getStaticProps() {
    const paths = (await getFiles('./pages'))
        .map(file => file.replaceAll('\\', '/'))
        .map(file => file.match(/.+\/pages(.*?)(?:\/index)?\.tsx/)![1])
        .filter(path => !(path.startsWith('/_') || path === '/404'));

    return {
        props: {paths}
    }
}

// Recursively searches a directory for all nested files.
// https://stackoverflow.com/a/45130990
async function getFiles(dir: string): Promise<string[]> {
    const dirents = readdirSync(dir, { withFileTypes: true });
    const files = await Promise.all(dirents.map((dirent) => {
        const res = resolve(dir, dirent.name);
        return dirent.isDirectory() ? getFiles(res) : res;
    }));
    return files.flat();
}
