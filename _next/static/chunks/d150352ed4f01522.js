(globalThis.TURBOPACK||(globalThis.TURBOPACK=[])).push(["object"==typeof document?document.currentScript:void 0,49356,e=>{e.v({AElig:"Æ",AMP:"&",Aacute:"Á",Acirc:"Â",Agrave:"À",Aring:"Å",Atilde:"Ã",Auml:"Ä",COPY:"©",Ccedil:"Ç",ETH:"Ð",Eacute:"É",Ecirc:"Ê",Egrave:"È",Euml:"Ë",GT:">",Iacute:"Í",Icirc:"Î",Igrave:"Ì",Iuml:"Ï",LT:"<",Ntilde:"Ñ",Oacute:"Ó",Ocirc:"Ô",Ograve:"Ò",Oslash:"Ø",Otilde:"Õ",Ouml:"Ö",QUOT:'"',REG:"®",THORN:"Þ",Uacute:"Ú",Ucirc:"Û",Ugrave:"Ù",Uuml:"Ü",Yacute:"Ý",aacute:"á",acirc:"â",acute:"´",aelig:"æ",agrave:"à",amp:"&",aring:"å",atilde:"ã",auml:"ä",brvbar:"¦",ccedil:"ç",cedil:"¸",cent:"¢",copy:"©",curren:"¤",deg:"°",divide:"÷",eacute:"é",ecirc:"ê",egrave:"è",eth:"ð",euml:"ë",frac12:"½",frac14:"¼",frac34:"¾",gt:">",iacute:"í",icirc:"î",iexcl:"¡",igrave:"ì",iquest:"¿",iuml:"ï",laquo:"«",lt:"<",macr:"¯",micro:"µ",middot:"·",nbsp:" ",not:"¬",ntilde:"ñ",oacute:"ó",ocirc:"ô",ograve:"ò",ordf:"ª",ordm:"º",oslash:"ø",otilde:"õ",ouml:"ö",para:"¶",plusmn:"±",pound:"£",quot:'"',raquo:"»",reg:"®",sect:"§",shy:"­",sup1:"¹",sup2:"²",sup3:"³",szlig:"ß",thorn:"þ",times:"×",uacute:"ú",ucirc:"û",ugrave:"ù",uml:"¨",uuml:"ü",yacute:"ý",yen:"¥",yuml:"ÿ"})},37429,e=>{e.v({0:"�",128:"€",130:"‚",131:"ƒ",132:"„",133:"…",134:"†",135:"‡",136:"ˆ",137:"‰",138:"Š",139:"‹",140:"Œ",142:"Ž",145:"‘",146:"’",147:"“",148:"”",149:"•",150:"–",151:"—",152:"˜",153:"™",154:"š",155:"›",156:"œ",158:"ž",159:"Ÿ"})},40141,e=>{"use strict";var t=e.i(71645),r={color:void 0,size:void 0,className:void 0,style:void 0,attr:void 0},a=t.default.createContext&&t.default.createContext(r),c=["attr","size","title"];function l(){return(l=Object.assign.bind()).apply(this,arguments)}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),r.push.apply(r,a)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach(function(t){var a,c,l;a=e,c=t,l=r[t],(c=function(e){var t=function(e,t){if("object"!=typeof e||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var a=r.call(e,t||"default");if("object"!=typeof a)return a;throw TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==typeof t?t:t+""}(c))in a?Object.defineProperty(a,c,{value:l,enumerable:!0,configurable:!0,writable:!0}):a[c]=l}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))})}return e}function n(e){return r=>t.default.createElement(i,l({attr:s({},e.attr)},r),function e(r){return r&&r.map((r,a)=>t.default.createElement(r.tag,s({key:a},r.attr),e(r.child)))}(e.child))}function i(e){var o=r=>{var a,{attr:o,size:n,title:i}=e,u=function(e,t){if(null==e)return{};var r,a,c=function(e,t){if(null==e)return{};var r={};for(var a in e)if(Object.prototype.hasOwnProperty.call(e,a)){if(t.indexOf(a)>=0)continue;r[a]=e[a]}return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)r=l[a],!(t.indexOf(r)>=0)&&Object.prototype.propertyIsEnumerable.call(e,r)&&(c[r]=e[r])}return c}(e,c),d=n||r.size||"1em";return r.className&&(a=r.className),e.className&&(a=(a?a+" ":"")+e.className),t.default.createElement("svg",l({stroke:"currentColor",fill:"currentColor",strokeWidth:"0"},r.attr,o,u,{className:a,style:s(s({color:e.color||r.color},r.style),e.style),height:d,width:d,xmlns:"http://www.w3.org/2000/svg"}),i&&t.default.createElement("title",null,i),e.children)};return void 0!==a?t.default.createElement(a.Consumer,null,e=>o(e)):o(r)}e.s(["GenIcon",()=>n],40141)},20533,e=>{"use strict";var t=e.i(43476),r=e.i(71645);function a(e){let a=(0,r.useRef)(null),{onChange:c,...l}=e;function o(){let e=a.current;e&&(e.style.height="auto",e.style.height=e.scrollHeight+8+"px")}return(0,r.useLayoutEffect)(()=>{o()},[]),(0,t.jsx)("textarea",{ref:a,onChange:e=>{c?.(e),o()},...l})}e.s(["default",()=>a])},1245,e=>{"use strict";var t=e.i(43476);function r(e){let{value:r,setValue:a,label:c}=e;return(0,t.jsxs)("div",{className:"flex flex-col gap-1 grow",children:[(0,t.jsx)("label",{className:"text-xs text-secondary",children:c}),(0,t.jsx)("input",{type:"text",value:r,onChange:e=>a(e.target.value),className:"rounded px-3 py-1 dark:bg-[#2b2b2b] border border-secondary/40"})]})}e.s(["default",()=>r])},91204,e=>{"use strict";var t=e.i(43476),r=e.i(71645),a=e.i(20533),c=e.i(10453),l=e.i(1245);function o(){let[e,o]=(0,r.useState)(1701),[n,i]=(0,r.useState)("A"),[u,d]=(0,r.useState)(""),[f,m]=(0,r.useState)(1e3);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)("div",{className:"flex flex-wrap gap-x-3 gap-y-1.5 mb-6 md:mb-2.5",children:[(0,t.jsx)(l.default,{label:"Contest",value:e,setValue:e=>!isNaN(Number(e))&&o(Number(e))}),(0,t.jsx)(l.default,{label:"Problem",value:n,setValue:i}),(0,t.jsx)(l.default,{label:"Count",value:f,setValue:e=>!isNaN(Number(e))&&m(Number(e))})]}),(0,t.jsx)(a.default,{placeholder:"Test case",value:u,onChange:e=>d(e.target.value),className:"rounded px-3 py-1 dark:bg-[#2b2b2b] mb-3 w-full border border-secondary/40 placeholder:text-secondary"}),(0,t.jsx)(c.default,{language:"js",children:s(e,n,u,f)})]})}let s=(e,t,r,a)=>`const contestId = ${e};
const problem = '${t.replaceAll(/['\\]/g,"\\$&")}';
const testCase = \`${r.replaceAll(/[`\\$]/g,"\\$&")}\`;
const count = ${a};

;(async () => {
    const submissions = (await (await fetch(\`https://codeforces.com/api/contest.status?contestId=\${contestId}&from=1&count=\${count}\`)).json()).result
        .filter((submission) => submission.verdict === 'OK' && submission.problem.index === problem);

    for (const submission of submissions) {
        const raw = await (await fetch(\`https://codeforces.com/contest/1701/challenge/\${submission.id}\`)).text();
        const [, csrf, body] = raw.match(/<form class="challenge-form".+?action="\\/data\\/challenge\\?csrf_token=(.+?)".*?>([^]+)<\\/form>/);

        const formData = new FormData();

        // Add all hidden fields
        [...body.matchAll(/<input type="hidden".+?name="(\\w+)".+?value="(\\w+)"\\/>/g)]
            .forEach(([, name, value]) => formData.append(name, value));

        formData.append('testcase', testCase);

        await fetch(\`https://codeforces.com/data/challenge?csrf_token=\${csrf}\`, {
            body: formData,
            method: 'POST'
        });
    }
})();`;e.s(["default",()=>o])}]);