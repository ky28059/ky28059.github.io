1:"$Sreact.fragment"
2:I[39756,["/_next/static/chunks/ff1a16fafef87110.js","/_next/static/chunks/b71c1cfea9076b4b.js"],"default"]
3:I[37457,["/_next/static/chunks/ff1a16fafef87110.js","/_next/static/chunks/b71c1cfea9076b4b.js"],"default"]
4:I[22016,["/_next/static/chunks/b9afcb09c56609a6.js"],""]
6:I[97367,["/_next/static/chunks/ff1a16fafef87110.js","/_next/static/chunks/b71c1cfea9076b4b.js"],"OutletBoundary"]
7:"$Sreact.suspense"
9:I[97367,["/_next/static/chunks/ff1a16fafef87110.js","/_next/static/chunks/b71c1cfea9076b4b.js"],"ViewportBoundary"]
b:I[97367,["/_next/static/chunks/ff1a16fafef87110.js","/_next/static/chunks/b71c1cfea9076b4b.js"],"MetadataBoundary"]
d:I[68027,["/_next/static/chunks/ff1a16fafef87110.js","/_next/static/chunks/b71c1cfea9076b4b.js"],"default"]
:HL["/_next/static/chunks/287f55c41d4b73fe.css","style"]
:HL["/_next/static/media/70bc3e132a0a741e-s.p.15008bfb.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/83afe278b6a6bb3c-s.p.3a6ba036.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
0:{"P":null,"b":"DfvEc75fs5QFxpmscM4-K","c":["","writeups","f18c4f60f000b3f94c5aef427ce8b9aa"],"q":"","i":false,"f":[[["",{"children":["writeups",{"children":[["id","f18c4f60f000b3f94c5aef427ce8b9aa","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],[["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/chunks/287f55c41d4b73fe.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"className":"dark scroll-smooth jetbrains_mono_cc80ae23-module__2tkX8G__variable","children":[["$","head",null,{"children":["$","meta",null,{"charSet":"utf-8"}]}],["$","body",null,{"className":"text-dark dark:text-white dark:bg-midnight","style":{"fontFamily":"'Inter', 'Inter Fallback'","fontStyle":"normal"},"children":["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","div",null,{"className":"h-screen flex items-center justify-center","children":["$","main",null,{"className":"relative pl-14","children":[["$","svg",null,{"stroke":"currentColor","fill":"currentColor","strokeWidth":"0","viewBox":"0 0 512 512","className":"absolute left-0 top-2 text-5xl text-grapefruit","children":["$undefined",[["$","path","0",{"d":"M256 48C140.559 48 48 140.559 48 256c0 115.436 92.559 208 208 208 115.435 0 208-92.564 208-208 0-115.441-92.564-208-208-208zm104.002 282.881l-29.12 29.117L256 285.117l-74.881 74.881-29.121-29.117L226.881 256l-74.883-74.881 29.121-29.116L256 226.881l74.881-74.878 29.12 29.116L285.119 256l74.883 74.881z","children":[]}]]],"style":{"color":"$undefined"},"height":"1em","width":"1em","xmlns":"http://www.w3.org/2000/svg"}],["$","h1",null,{"className":"font-bold text-7xl underline decoration-grapefruit mb-5","children":"404."}],["$","p",null,{"children":"Your requested page was not found."}],["$","$L4",null,{"href":"/","className":"font-medium text-inherit","children":"Return to home →"}]]}]}],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]]}]]}],{"children":[["$","$1","c",{"children":[null,["$","main",null,{"className":"container pt-20 pb-24","children":["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]]}],{"children":[["$","$1","c",{"children":[[["$","script","script-0",{"src":"/_next/static/chunks/b9afcb09c56609a6.js","async":true,"nonce":"$undefined"}]],[["$","$L4",null,{"href":"/writeups","className":"text-secondary text-sm mb-10 -ml-5 block w-max","children":"← Back to writeups"}],["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]]}],{"children":[["$","$1","c",{"children":["$L5",[["$","script","script-0",{"src":"/_next/static/chunks/59d5dd52dd9fcb16.js","async":true,"nonce":"$undefined"}],["$","script","script-1",{"src":"/_next/static/chunks/0eb309e820c00a6d.js","async":true,"nonce":"$undefined"}],["$","script","script-2",{"src":"/_next/static/chunks/a6b27ecf1b9e9188.js","async":true,"nonce":"$undefined"}],["$","script","script-3",{"src":"/_next/static/chunks/39b99946d2be6a43.js","async":true,"nonce":"$undefined"}]],["$","$L6",null,{"children":["$","$7",null,{"name":"Next.MetadataOutlet","children":"$@8"}]}]]}],{},null,false,false]},null,false,false]},null,false,false]},null,false,false],["$","$1","h",{"children":[null,["$","$L9",null,{"children":"$@a"}],["$","div",null,{"hidden":true,"children":["$","$Lb",null,{"children":["$","$7",null,{"name":"Next.Metadata","children":"$@c"}]}]}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}],false]],"m":"$undefined","G":["$d",[]],"s":false,"S":true}
a:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
e:I[10453,["/_next/static/chunks/b9afcb09c56609a6.js","/_next/static/chunks/59d5dd52dd9fcb16.js","/_next/static/chunks/0eb309e820c00a6d.js","/_next/static/chunks/a6b27ecf1b9e9188.js","/_next/static/chunks/39b99946d2be6a43.js"],"default"]
f:T84b,#!/usr/bin/python3

import os,pwd,re
import socketserver, signal
import subprocess

listen = 3333

blacklist = os.popen("ls /bin").read().split("\n")
blacklist.remove("echo")
#print(blacklist)

def filter_check(command):
    user_input = command
    parsed = command.split()
    #Must begin with echo
    if not "echo" in parsed:
        return False
    else:
        if ">" in parsed:
            #print("HEY! No moving things around.")
            req.sendall(b"HEY! No moving things around.\n\n")
            return False
        else:
            parsed = command.replace("$", " ").replace("(", " ").replace(")", " ").replace("|"," ").replace("&", " ").replace(";"," ").replace("<"," ").replace(">"," ").replace("`"," ").split()
            #print(parsed)
            for i in range(len(parsed)):
                if parsed[i] in blacklist:
                    return False
            return True

def backend(req):
    req.sendall(b'This is shell made to use only the echo command.\n')
    while True:
        #print("\nThis is shell made to use only the echo command.")
        req.sendall(b'Please input command: ')
        user_input = req.recv(4096).strip(b'\n').decode()
        print(user_input)
        #Check input
        if user_input:
            if filter_check(user_input):
                output = os.popen(user_input).read()
                req.sendall((output + '\n').encode())
            else:
                #print("Those commands don't work.")
                req.sendall(b"HEY! I said only echo works.\n\n")
        else:
            #print("Why no command?")
            req.sendall(b"Where\'s the command.\n\n")

class incoming(socketserver.BaseRequestHandler):
    def handle(self):
        signal.alarm(1500)
        req = self.request
        backend(req)


class ReusableTCPServer(socketserver.ForkingMixIn, socketserver.TCPServer):
    pass


def main():
    uid = pwd.getpwnam('ctf')[2]
    os.setuid(uid)
    socketserver.TCPServer.allow_reuse_address = True
    server = ReusableTCPServer(("0.0.0.0", listen), incoming)
    server.serve_forever()

if __name__ == '__main__':
    main()5:["$","div",null,{"children":["$","main",null,{"className":"text-pretty max-w-5xl mx-auto text-sm [&_h1]:text-5xl [&_h1]:font-semibold [&_h1]:mb-8 [&_blockquote]:text-secondary [&_blockquote]:space-y-3 [&_blockquote]:border-l-4 [&_blockquote]:border-secondary [&_blockquote]:pl-5 [&_blockquote]:mb-5 [&>_p]:my-4 [&_img]:my-5 [&_ul]:list-disc [&_ul]:pl-6 [&_ol]:list-decimal [&_ol]:pl-6 [&_img]:rounded [&_li]:my-2","children":[["$","h1","h1-0",{"children":"PatriotCTF 2024 — Really Only Echo"}],"\n",["$","blockquote","blockquote-0",{"children":["\n",["$","p","p-0",{"children":"Hey, I have made a terminal that only uses echo, can you find the flag?"}],"\n",["$","p","p-1",{"children":["$","code","code-0",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"nc chal.competitivecyber.club 3333"}]}],"\n"]}],"\n",["$","p","p-0",{"children":"We're given a Python server that looks like this:"}],"\n",["$","$Le","pre-0",{"className":"my-2","children":"$f","language":"py"}],"\n",["$","p","p-1",{"children":["We're given a shell, but all binaries in ",["$","code","code-0",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"/bin"}]," except ",["$","code","code-1",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"echo"}]," are banned (and indeed, we're forced to have at least one ","$L10"," in our input)."]}],"\n","$L11","\n","$L12","\n","$L13","\n","$L14","\n","$L15","\n","$L16","\n","$L17","\n","$L18","\n","$L19","\n","$L1a","\n","$L1b","\n","$L1c","\n","$L1d"]}]}]
:HL["https://gist.github.com/user-attachments/assets/a08452a5-fcd9-4849-af40-8979f678f55e","image"]
:HL["https://gist.github.com/user-attachments/assets/7ad40530-ab1e-40dd-b709-ce2954da1cb1","image"]
10:["$","code","code-2",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"echo"}]
11:["$","p","p-2",{"children":["We can run an equivalent of ",["$","code","code-0",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"ls"}]," with ",["$","code","code-1",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"echo *"}]," to see our target, ",["$","code","code-2",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"flag.txt"}]," in the same directory:"]}]
12:["$","p","p-3",{"children":["$","img","img-0",{"src":"https://gist.github.com/user-attachments/assets/a08452a5-fcd9-4849-af40-8979f678f55e","alt":"image"}]}]
13:["$","p","p-4",{"children":["At first glance, we can try using ",["$","a","a-0",{"href":"https://stackoverflow.com/a/22378194","children":["$","code","code-0",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"echo $(<flag.txt)"}]}]," to concatenate and print the flag file with ",["$","code","code-0",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"echo"}],", but unfortunately ",["$","code","code-1",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"$$(<)"}]," is a bash-exclusive construct which won't work on Python's default shell ",["$","code","code-2",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"sh"}],"."]}]
14:["$","p","p-5",{"children":"Still, a clue lies in the way the server checks our input for banned commands:"}]
15:["$","$Le","pre-1",{"className":"my-2","children":"            parsed = command.replace(\"$\", \" \").replace(\"(\", \" \").replace(\")\", \" \").replace(\"|\",\" \").replace(\"&\", \" \").replace(\";\",\" \").replace(\"<\",\" \").replace(\">\",\" \").replace(\"`\",\" \").split()\n            #print(parsed)\n            for i in range(len(parsed)):\n                if parsed[i] in blacklist:\n                    return False","language":"py"}]
16:["$","p","p-6",{"children":["While they seemingly account for trying to escape the plaintext blacklist check using characters like ",["$","code","code-0",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"("}],", ",["$","code","code-1",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"&"}],", and ",["$","code","code-2",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":";"}],", they don't account for ",["$","code","code-3",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"}"}],"."]}]
17:["$","p","p-7",{"children":["Thus, we can run any command by using shell variable expansion and ",["$","a","a-0",{"href":"https://en.wikipedia.org/wiki/Input_Field_Separators","children":["$","code","code-0",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"$$IFS"}]}]," a la"]}]
18:["$","$Le","pre-2",{"className":"my-2","children":"echo *;${IFS}command","language":"bash"}]
19:["$","p","p-8",{"children":["(remembering to have at least one ",["$","code","code-0",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"echo"}]," in the command to satisfy the filter)."]}]
1a:["$","p","p-9",{"children":"Finally, we can run"}]
1b:["$","$Le","pre-3",{"className":"my-2","children":"echo *;${IFS}cat flag.txt","language":"bash"}]
1c:["$","p","p-10",{"children":"to cat the flag."}]
1d:["$","p","p-11",{"children":["$","img","img-0",{"src":"https://gist.github.com/user-attachments/assets/7ad40530-ab1e-40dd-b709-ce2954da1cb1","alt":"image"}]}]
c:[["$","title","0",{"children":"PatriotCTF 2024 — Really Only Echo | kevin.fish"}],["$","meta","1",{"name":"description","content":"Hey, I have made a terminal that only uses echo, can you find the flag?"}],["$","meta","2",{"property":"og:title","content":"PatriotCTF 2024 — Really Only Echo"}],["$","meta","3",{"property":"og:description","content":"Hey, I have made a terminal that only uses echo, can you find the flag?"}],["$","meta","4",{"name":"twitter:card","content":"summary"}],["$","meta","5",{"name":"twitter:title","content":"PatriotCTF 2024 — Really Only Echo"}],["$","meta","6",{"name":"twitter:description","content":"Hey, I have made a terminal that only uses echo, can you find the flag?"}]]
8:null
