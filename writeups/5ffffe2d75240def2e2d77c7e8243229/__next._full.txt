1:"$Sreact.fragment"
2:I[39756,["/_next/static/chunks/ff1a16fafef87110.js","/_next/static/chunks/b71c1cfea9076b4b.js"],"default"]
3:I[37457,["/_next/static/chunks/ff1a16fafef87110.js","/_next/static/chunks/b71c1cfea9076b4b.js"],"default"]
4:I[22016,["/_next/static/chunks/b9afcb09c56609a6.js"],""]
6:I[97367,["/_next/static/chunks/ff1a16fafef87110.js","/_next/static/chunks/b71c1cfea9076b4b.js"],"OutletBoundary"]
7:"$Sreact.suspense"
9:I[97367,["/_next/static/chunks/ff1a16fafef87110.js","/_next/static/chunks/b71c1cfea9076b4b.js"],"ViewportBoundary"]
b:I[97367,["/_next/static/chunks/ff1a16fafef87110.js","/_next/static/chunks/b71c1cfea9076b4b.js"],"MetadataBoundary"]
d:I[68027,["/_next/static/chunks/ff1a16fafef87110.js","/_next/static/chunks/b71c1cfea9076b4b.js"],"default"]
:HL["/_next/static/chunks/3c1b2f4e7e90f1ff.css","style"]
:HL["/_next/static/media/83afe278b6a6bb3c-s.p.3a6ba036.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
0:{"P":null,"b":"QiRS6Sx9Ttvp1BSl4xu2I","c":["","writeups","5ffffe2d75240def2e2d77c7e8243229"],"q":"","i":false,"f":[[["",{"children":["writeups",{"children":[["id","5ffffe2d75240def2e2d77c7e8243229","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],[["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/chunks/3c1b2f4e7e90f1ff.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"className":"dark scroll-smooth","children":[["$","head",null,{"children":["$","meta",null,{"charSet":"utf-8"}]}],["$","body",null,{"className":"text-dark dark:text-white dark:bg-midnight","style":{"fontFamily":"'Inter', 'Inter Fallback'","fontStyle":"normal"},"children":["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","div",null,{"className":"h-screen flex items-center justify-center","children":["$","main",null,{"className":"relative pl-14","children":[["$","svg",null,{"stroke":"currentColor","fill":"currentColor","strokeWidth":"0","viewBox":"0 0 512 512","className":"absolute left-0 top-2 text-5xl text-grapefruit","children":["$undefined",[["$","path","0",{"d":"M256 48C140.559 48 48 140.559 48 256c0 115.436 92.559 208 208 208 115.435 0 208-92.564 208-208 0-115.441-92.564-208-208-208zm104.002 282.881l-29.12 29.117L256 285.117l-74.881 74.881-29.121-29.117L226.881 256l-74.883-74.881 29.121-29.116L256 226.881l74.881-74.878 29.12 29.116L285.119 256l74.883 74.881z","children":[]}]]],"style":{"color":"$undefined"},"height":"1em","width":"1em","xmlns":"http://www.w3.org/2000/svg"}],["$","h1",null,{"className":"font-bold text-7xl underline decoration-grapefruit mb-5","children":"404."}],["$","p",null,{"children":"Your requested page was not found."}],["$","$L4",null,{"href":"/","className":"font-medium text-inherit","children":"Return to home →"}]]}]}],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]]}]]}],{"children":[["$","$1","c",{"children":[null,["$","main",null,{"className":"container pt-20 pb-24","children":["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]]}],{"children":[["$","$1","c",{"children":[[["$","script","script-0",{"src":"/_next/static/chunks/b9afcb09c56609a6.js","async":true,"nonce":"$undefined"}]],[["$","$L4",null,{"href":"/writeups","className":"text-secondary text-sm mb-10 -ml-5 block w-max","children":"← Back to writeups"}],["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]]}],{"children":[["$","$1","c",{"children":["$L5",[["$","script","script-0",{"src":"/_next/static/chunks/59d5dd52dd9fcb16.js","async":true,"nonce":"$undefined"}],["$","script","script-1",{"src":"/_next/static/chunks/0eb309e820c00a6d.js","async":true,"nonce":"$undefined"}],["$","script","script-2",{"src":"/_next/static/chunks/239c8c4944a9f036.js","async":true,"nonce":"$undefined"}],["$","script","script-3",{"src":"/_next/static/chunks/39b99946d2be6a43.js","async":true,"nonce":"$undefined"}]],["$","$L6",null,{"children":["$","$7",null,{"name":"Next.MetadataOutlet","children":"$@8"}]}]]}],{},null,false,false]},null,false,false]},null,false,false]},null,false,false],["$","$1","h",{"children":[null,["$","$L9",null,{"children":"$@a"}],["$","div",null,{"hidden":true,"children":["$","$Lb",null,{"children":["$","$7",null,{"name":"Next.Metadata","children":"$@c"}]}]}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}],false]],"m":"$undefined","G":["$d",[]],"s":false,"S":true}
a:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
e:I[10453,["/_next/static/chunks/b9afcb09c56609a6.js","/_next/static/chunks/59d5dd52dd9fcb16.js","/_next/static/chunks/0eb309e820c00a6d.js","/_next/static/chunks/239c8c4944a9f036.js","/_next/static/chunks/39b99946d2be6a43.js"],"default"]
5:["$","div",null,{"children":["$","main",null,{"className":"text-pretty max-w-5xl mx-auto text-sm [&_h1]:text-5xl [&_h1]:font-semibold [&_h1]:mb-8 [&_blockquote]:text-secondary [&_blockquote]:space-y-3 [&_blockquote]:border-l-4 [&_blockquote]:border-secondary [&_blockquote]:pl-5 [&_blockquote]:mb-5 [&>_p]:my-4 [&_img]:my-5 [&_ul]:list-disc [&_ul]:pl-6 [&_ol]:list-decimal [&_ol]:pl-6 [&_img]:rounded [&_li]:my-2","children":[["$","h1","h1-0",{"children":"SDCTF 2025 — triglot"}],"\n",["$","blockquote","blockquote-0",{"children":["\n",["$","p","p-0",{"children":"You think you know programming? You think you know languages? heh... as if 🙄"}],"\n",["$","p","p-1",{"children":"Come back to me when you can write a program that runs in the 3 deadly P's: Perl, Python, and (P)Javascript"}],"\n",["$","p","p-2",{"children":["Connect with ",["$","code","code-0",{"className":"opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"nc -q 2 -N 52.8.15.62 8001"}]]}],"\n",["$","p","p-3",{"children":["Flag is located at ",["$","code","code-0",{"className":"opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"./flag.txt"}]]}],"\n"]}],"\n",["$","p","p-0",{"children":"We're given a script that looks like this:"}],"\n",["$","$Le","pre-0",{"className":"my-2","children":"#!/usr/bin/env bash\nset -eo pipefail\n\nwrong() {\n  printf \"EXTREMELY LOUD INCORRECT BUZZER!!!\\n\"\n}\ntrap wrong ERR\n\ncode=$(cat)\n\nprintf '%s' \"$code\" | perl -c\nprintf '%s' \"$code\" | python3 -c 'import sys,ast; ast.parse(sys.stdin.read())'\nprintf '%s' \"$code\" | node -e \"const fs=require('fs'), src=fs.readFileSync(0,'utf8'); require('vm').createScript(src)\"\n\nperl_out=$(printf '%s' \"$code\" | perl -)\npy_out=$(printf '%s' \"$code\" | python3 -)\njs_out=$(printf '%s' \"$code\" | node -)\n\nif [[ \"$perl_out\" == \"$py_out\" && \"$perl_out\" == \"$js_out\" ]]; then\n  printf \"Your triglot compiles!! Here's your output:\\n\"\n  printf '%s\\n' \"$perl_out\"\nelse\n  exit 1\nfi","language":"bash"}],"\n",["$","p","p-1",{"children":"It seems like we just need to make a script that runs in Perl, Python, and JS, and prints the flag in each one."}],"\n",["$","p","p-2",{"children":["To start, a Python / JS polyglot seems pretty straightforward: we can use the fact that ",["$","code","code-0",{"className":"opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"//"}]," is floor division\nin Python and a line comment in JS to create areas of our script only executed in Python:"]}],"\n",["$","$Le","pre-1",{"className":"my-2","children":"3 // 2; [... code only executed in python]","language":"js"}],"\n",["$","$Le","pre-2",{"className":"my-2","children":"3 // 2; [... code only executed in python]","language":"py"}],"\n",["$","p","p-3",{"children":"With this, we can use Python multi-line strings to \"comment out\" chunks of code to be only executed in JS:"}],"\n",["$","$Le","pre-3",{"className":"my-2","children":"3 // 2; '''\n[... code only executed in JS]\n//'''","language":"js"}],"\n",["$","$Le","pre-4",{"className":"my-2","children":"3 // 2; '''\n[... code only executed in JS]\n//'''","language":"py"}],"\n",["$","p","p-4",{"children":"Thus, our Python / JS polyglot that cats the flag is as simple as"}],"\n",["$","$Le","pre-5",{"className":"my-2","children":"3 // 2; print(open('./flag.txt').read()); '''\nconst { readFileSync } = require('fs'); console.log(readFileSync('./flag.txt').toString());\n//'''","language":"js"}],"\n",["$","$Le","pre-6",{"className":"my-2","children":"3 // 2; print(open('./flag.txt').read()); '''\nconst { readFileSync } = require('fs'); console.log(readFileSync('./flag.txt').toString());\n//'''","language":"py"}],"\n",["$","p","p-5",{"children":["Now for the challenging part: adding Perl. We can try to use ","$Lf"," to embed the above Python /\nJS payload in a surrounding Perl script, but the syntax is too strange: the ","$L10"," \"start comment\" deliminator"]}],"\n","$L11","\n","$L12","\n","$L13","\n","$L14","\n","$L15","\n","$L16","\n","$L17","\n","$L18","\n","$L19","\n","$L1a","\n","$L1b","\n","$L1c","\n","$L1d","\n","$L1e","\n","$L1f","\n","$L20","\n","$L21","\n","$L22","\n","$L23","\n","$L24","\n","$L25","\n","$L26","\n","$L27","\n","$L28","\n","$L29","\n","$L2a","\n","$L2b","\n","$L2c","\n","$L2d","\n","$L2e","\n","$L2f","\n","$L30","\n","$L31","\n","$L32","\n","$L33","\n","$L34","\n","$L35","\n","$L36","\n","$L37"]}]}]
f:["$","a","a-0",{"href":"https://stackoverflow.com/questions/3828205/how-do-i-enter-a-multi-line-comment-in-perl","children":"Perl multiline comments"}]
10:["$","code","code-0",{"className":"opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"=hello"}]
11:["$","$Le","pre-7",{"className":"my-2","children":"=hello\n... perl comment\n=cut","language":"perl"}]
12:["$","p","p-6",{"children":"would give syntax errors in JS and Python, and trying to disguise it as a variable assignment e.g."}]
13:["$","$Le","pre-8",{"className":"my-2","children":"hello = 5;\na\n=hello\n... perl comment\n=cut","language":"js"}]
14:["$","p","p-7",{"children":"would also lead to it being parsed as an assignment in Perl (with many errors following)."}]
15:["$","p","p-8",{"children":["Instead, we can use the convenient ",["$","a","a-0",{"href":"https://perldoc.perl.org/perldata#Special-Literals","children":["Perl ",["$","code","code-0",{"className":"opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"__END__"}]," special token"]}],"\nto cause the Perl interpreter to ignore all subsequent text in the payload, avoiding having to manage Perl syntax errors\nin the process!"]}]
16:["$","p","p-9",{"children":"Thus, the main idea becomes doing something like:"}]
17:["$","$Le","pre-9",{"className":"my-2","children":"open(FH, \"<\", \"./flag.txt\"); print <FH>;\n\n__END__=5;\n3 // 2; print(open('./flag.txt').read()); '''\nconst { readFileSync } = require('fs'); console.log(readFileSync('./flag.txt').toString());\n//'''","language":"js"}]
18:["$","$Le","pre-10",{"className":"my-2","children":"open(FH, \"<\", \"./flag.txt\"); print <FH>;\n\n__END__=5;\n3 // 2; print(open('./flag.txt').read()); '''\nconst { readFileSync } = require('fs'); console.log(readFileSync('./flag.txt').toString());\n//'''","language":"py"}]
19:["$","$Le","pre-11",{"className":"my-2","children":"open(FH, \"<\", \"./flag.txt\"); print <FH>;\n\n__END__=5;\n3 // 2; print(open('./flag.txt').read()); '''\nconst { readFileSync } = require('fs'); console.log(readFileSync('./flag.txt').toString());\n//'''","language":"perl"}]
1a:["$","p","p-10",{"children":["where we paste our JS / Python polyglot after the ",["$","code","code-0",{"className":"opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"__END__"}]," token to avoid having to deal with Perl syntax there."]}]
1b:["$","p","p-11",{"children":["(note: we need to do ",["$","code","code-0",{"className":"opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"__END__=5"}]," and wrap the ",["$","code","code-1",{"className":"opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"__END__"}]," token in an assignment to avoid a JS ",["$","code","code-2",{"className":"opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"ReferenceError"}]," or Python\n",["$","code","code-3",{"className":"opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"NameError"}],".)"]}]
1c:["$","p","p-12",{"children":"Finally, we just need to figure out a way to get the first"}]
1d:["$","$Le","pre-12",{"className":"my-2","children":"open(FH, \"<\", \"./flag.txt\"); print <FH>;","language":"perl"}]
1e:["$","p","p-13",{"children":"Perl snippet to not raise syntax errors in Python or JS."}]
1f:["$","p","p-14",{"children":["This part is a bit tricky: we need to use the ",["$","code","code-0",{"className":"opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"//"}]," trick from before (which is luckily valid Perl for ",["$","a","a-0",{"href":"https://perldoc.perl.org/perlop#Logical-Defined-Or","children":"short-circuited \"definedness\nOR\""}],") to comment out Python- / Perl-only areas."]}]
20:["$","p","p-15",{"children":["Since single-line comments are started by ",["$","code","code-0",{"className":"opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"#"}]," in both Perl and Python, we need to use multiline strings for Python\ncomments instead. Note that if we're ",["$","em","em-0",{"children":"inside a string"}],", ",["$","code","code-1",{"className":"opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"#"}]," won't start a single-line comment; thus, we can try to layer strings\nsuch that we are inside a string in Python and not Perl, and vice versa to comment out different sections of code in each."]}]
21:["$","p","p-16",{"children":["But there's one last trick, since simply having a python triple-quoted string in Perl will raise syntax errors: ",["$","a","a-0",{"href":"https://perldoc.perl.org/perlop#Quote-Like-Operators","children":"Perl \"quote-like operators\""}]," (which I learned about from this ",["$","a","a-1",{"href":"https://github.com/floyd-fuh/C-CPP-Perl-Ruby-Python-Polyglot/blob/master/python_2_and_3_improvement/code.c","children":"C, Ruby Perl, Python polyglot on GitHub"}],")."]}]
22:["$","p","p-17",{"children":["We can use the token ",["$","code","code-0",{"className":"opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"q=\"\"\""}]," to start a multi-line string in Python and a q-string in Perl, where:"]}]
23:["$","ul","ul-0",{"children":["\n",["$","li","li-0",{"children":[["$","code","code-0",{"className":"opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"\"\"\""}]," ends the Python string, and"]}],"\n",["$","li","li-1",{"children":[["$","code","code-0",{"className":"opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"="}]," ends the Perl string,"]}],"\n"]}]
24:["$","p","p-18",{"children":"letting us construct something like"}]
25:["$","$Le","pre-13",{"className":"my-2","children":"q=\"\"\"\n[... this is commented out in python and perl]\n=;\n[... this is commented out in python only]\n#\"\"\"","language":"py"}]
26:["$","$Le","pre-14",{"className":"my-2","children":"q=\"\"\"\n[... this is commented out in python and perl]\n=;\n[... this is commented out in python only]\n#\"\"\"","language":"perl"}]
27:["$","p","p-19",{"children":"Weaving these all together, we can construct"}]
28:["$","$Le","pre-15",{"className":"my-2","children":"3 // 2; q=\"\"\"\n/*=;\nopen(FH, \"<\", \"./flag.txt\"); print <FH>;\n#*/\n3 // 2;#\"\"\"","language":"js"}]
29:["$","$Le","pre-16",{"className":"my-2","children":"3 // 2; q=\"\"\"\n/*=;\nopen(FH, \"<\", \"./flag.txt\"); print <FH>;\n#*/\n3 // 2;#\"\"\"","language":"py"}]
2a:["$","$Le","pre-17",{"className":"my-2","children":"3 // 2; q=\"\"\"\n/*=;\nopen(FH, \"<\", \"./flag.txt\"); print <FH>;\n#*/\n3 // 2;#\"\"\"","language":"perl"}]
2b:["$","p","p-20",{"children":"for a final payload of"}]
2c:["$","$Le","pre-18",{"className":"my-2","children":"3 // 2; q=\"\"\"\n/*=;\nopen(FH, \"<\", \"./flag.txt\"); print <FH>;\n#*/\n3 // 2;#\"\"\"\n\n__END__=5;\n3 // 2; print(open('./flag.txt').read()); '''\nconst { readFileSync } = require('fs'); console.log(readFileSync('./flag.txt').toString());\n//'''","language":"js"}]
2d:["$","$Le","pre-19",{"className":"my-2","children":"3 // 2; q=\"\"\"\n/*=;\nopen(FH, \"<\", \"./flag.txt\"); print <FH>;\n#*/\n3 // 2;#\"\"\"\n\n__END__=5;\n3 // 2; print(open('./flag.txt').read()); '''\nconst { readFileSync } = require('fs'); console.log(readFileSync('./flag.txt').toString());\n//'''","language":"py"}]
2e:["$","$Le","pre-20",{"className":"my-2","children":"3 // 2; q=\"\"\"\n/*=;\nopen(FH, \"<\", \"./flag.txt\"); print <FH>;\n#*/\n3 // 2;#\"\"\"\n\n__END__=5;\n3 // 2; print(open('./flag.txt').read()); '''\nconst { readFileSync } = require('fs'); console.log(readFileSync('./flag.txt').toString());\n//'''","language":"perl"}]
2f:["$","p","p-21",{"children":"Submitting this, we get our flag:"}]
30:["$","$Le","pre-21",{"className":"my-2","children":"kevin@ky28059:/mnt/c/users/kevin/Downloads$ cat payload | nc -q 4 -N 52.8.15.62 8001\nYour triglot compiles!! Here's your output:\nsdctf{y0u_know_s0_m4ny_langu4g3s!}","language":"bash"}]
31:["$","div","h3-0",{"className":"relative","children":[["$","span",null,{"id":"final-notes","className":"absolute -top-16"}],["$","a",null,{"className":"group flex gap-2 items-center text-inherit hover:underline decoration-1 underline-offset-4 decoration-secondary decoration-dotted text-3xl font-bold mt-10 mb-4 ","href":"#final-notes","children":[["$","h2",null,{"children":"Final notes"}],["$","svg",null,{"stroke":"currentColor","fill":"none","strokeWidth":"2","viewBox":"0 0 24 24","strokeLinecap":"round","strokeLinejoin":"round","className":"hidden group-hover:block text-xl absolute pt-0.5 -left-7 stroke-[1.5px] text-secondary","children":["$undefined",[["$","path","0",{"d":"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71","children":[]}],["$","path","1",{"d":"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71","children":[]}]]],"style":{"color":"$undefined"},"height":"1em","width":"1em","xmlns":"http://www.w3.org/2000/svg"}]]}]]}]
32:["$","p","p-22",{"children":"As I was making this writeup, I realized that the quote-wrapping tricks used for the initial Perl part of the payload was sufficient for the entire payload, as it had code areas that ran exclusively in Perl, JS, and Python."}]
33:["$","p","p-23",{"children":"Then, our entire payload can just be simplified to"}]
34:["$","$Le","pre-22",{"className":"my-2","children":"3 // 2; q=\"\"\"\nconsole.log(require('fs').readFileSync('./flag.txt').toString()); /*=;\nopen(FH, \"<\", \"./flag.txt\"); print <FH>;\n#*/\n3 // 2;#\"\"\"; print(open('./flag.txt').read())","language":"js"}]
35:["$","$Le","pre-23",{"className":"my-2","children":"3 // 2; q=\"\"\"\nconsole.log(require('fs').readFileSync('./flag.txt').toString()); /*=;\nopen(FH, \"<\", \"./flag.txt\"); print <FH>;\n#*/\n3 // 2;#\"\"\"; print(open('./flag.txt').read())","language":"py"}]
36:["$","$Le","pre-24",{"className":"my-2","children":"3 // 2; q=\"\"\"\nconsole.log(require('fs').readFileSync('./flag.txt').toString()); /*=;\nopen(FH, \"<\", \"./flag.txt\"); print <FH>;\n#*/\n3 // 2;#\"\"\"; print(open('./flag.txt').read())","language":"perl"}]
37:["$","p","p-24",{"children":["(we need to be careful about avoiding ",["$","code","code-0",{"className":"opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"="}],"s in the JS section, lest we end the Perl string prematurely.)"]}]
c:[["$","title","0",{"children":"SDCTF 2025 — triglot | kevin.fish"}],["$","meta","1",{"name":"description","content":"You think you know programming? You think you know languages? heh... as if 🙄"}],["$","meta","2",{"property":"og:title","content":"SDCTF 2025 — triglot"}],["$","meta","3",{"property":"og:description","content":"You think you know programming? You think you know languages? heh... as if 🙄"}],["$","meta","4",{"name":"twitter:card","content":"summary"}],["$","meta","5",{"name":"twitter:title","content":"SDCTF 2025 — triglot"}],["$","meta","6",{"name":"twitter:description","content":"You think you know programming? You think you know languages? heh... as if 🙄"}]]
8:null
