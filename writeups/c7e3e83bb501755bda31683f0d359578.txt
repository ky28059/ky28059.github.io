1:"$Sreact.fragment"
2:I[87555,[],""]
3:I[31295,[],""]
4:I[6874,["874","static/chunks/874-3e820bd666038662.js","633","static/chunks/app/writeups/%5Bid%5D/layout-2577bd3482649595.js"],""]
6:I[59665,[],"OutletBoundary"]
8:I[74911,[],"AsyncMetadataOutlet"]
a:I[59665,[],"ViewportBoundary"]
c:I[59665,[],"MetadataBoundary"]
d:"$Sreact.suspense"
f:I[28393,[],""]
:HL["/_next/static/media/e4af272ccee01ff0-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/5137b7a074c35308.css","style"]
0:{"P":null,"b":"sErSrOfutUclsW-VrC85j","p":"","c":["","writeups","c7e3e83bb501755bda31683f0d359578"],"i":false,"f":[[["",{"children":["writeups",{"children":[["id","c7e3e83bb501755bda31683f0d359578","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/5137b7a074c35308.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"className":"dark scroll-smooth","children":[["$","head",null,{"children":["$","meta",null,{"charSet":"utf-8"}]}],["$","body",null,{"className":"text-dark dark:text-white dark:bg-midnight","style":{"fontFamily":"'Inter', 'Inter Fallback'","fontStyle":"normal"},"children":["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","div",null,{"className":"h-screen flex items-center justify-center","children":["$","main",null,{"className":"relative pl-14","children":[["$","svg",null,{"stroke":"currentColor","fill":"currentColor","strokeWidth":"0","viewBox":"0 0 512 512","className":"absolute left-0 top-2 text-5xl text-grapefruit","children":["$undefined",[["$","path","0",{"d":"M256 48C140.559 48 48 140.559 48 256c0 115.436 92.559 208 208 208 115.435 0 208-92.564 208-208 0-115.441-92.564-208-208-208zm104.002 282.881l-29.12 29.117L256 285.117l-74.881 74.881-29.121-29.117L226.881 256l-74.883-74.881 29.121-29.116L256 226.881l74.881-74.878 29.12 29.116L285.119 256l74.883 74.881z","children":"$undefined"}]]],"style":{"color":"$undefined"},"height":"1em","width":"1em","xmlns":"http://www.w3.org/2000/svg"}],["$","h1",null,{"className":"font-bold text-7xl underline decoration-grapefruit mb-5","children":"404."}],["$","p",null,{"children":"Your requested page was not found."}],["$","$L4",null,{"href":"/","className":"font-medium text-inherit","children":"Return to home →"}]]}]}],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]]}]]}],{"children":["writeups",["$","$1","c",{"children":[null,["$","main",null,{"className":"container pt-20 pb-24","children":["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]]}],{"children":[["id","c7e3e83bb501755bda31683f0d359578","d"],["$","$1","c",{"children":[null,[["$","$L4",null,{"href":"/writeups","className":"text-secondary text-sm mb-10 -ml-5 block w-max","children":"← Back to writeups"}],["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L5",null,["$","$L6",null,{"children":["$L7",["$","$L8",null,{"promise":"$@9"}]]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,[["$","$La",null,{"children":"$Lb"}],["$","meta",null,{"name":"next-size-adjust","content":""}]],["$","$Lc",null,{"children":["$","div",null,{"hidden":true,"children":["$","$d",null,{"fallback":null,"children":"$Le"}]}]}]]}],false]],"m":"$undefined","G":["$f",[]],"s":false,"S":true}
b:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
7:null
10:I[50674,["263","static/chunks/bc9c3264-6371ca03223855d4.js","810","static/chunks/48507feb-8452885980bba250.js","330","static/chunks/08ffe114-f47006c90e36a3eb.js","800","static/chunks/800-bd0deb6e7b7e903a.js","134","static/chunks/app/writeups/%5Bid%5D/page-54fe20cc7a9d3224.js"],"default"]
11:Tfd7,from basement_of_rin import NanakuraRin, flag, generate_graph

import time
from random import Random

def Server(m):
	print("Server> " + m)

def Rin(m):
	print("Rin> " + m)

def check_subset(_subset, set):
	subset = sorted(_subset)
	assert len(subset) != 0
	for i in range(len(subset) - 1):
		subset[i] < subset[i + 1]
	for x in subset:
		assert x in set

class disjoint_set:
	def __init__(self, n):
		self.n = n
		self.p = [-1] * self.n
	def root(self, u):
		if self.p[u] < 0:
			return u
		self.p[u] = self.root(self.p[u])
		return self.p[u]
	def share(self, u, v):
		return self.root(u) == self.root(v)
	def merge(self, u, v):
		u, v = self.root(u), self.root(v)
		if u == v:
			return False
		if self.p[u] > self.p[v]:
			u, v = v, u
		self.p[u] += self.p[v]
		self.p[v] = u
		return True
	def clear(self):
		self.p = [-1] * self.n

def check_tree(subset, V, edges):
	assert len(subset) == V - 1
	ds = disjoint_set(V)
	for i in subset:
		assert isinstance(i, int) and 0 <= i < len(edges)
		u, v, w = edges[i]
		assert ds.merge(u, v)

def determine_the_winner(piles):
	# https://en.wikipedia.org/wiki/Nim
	# Rin-chan is perfect, so she'll always make the optimal move.
	# You're perfect too, so you'll always make the perfect move as well.
	# Let's fast-forward the game to the end :)
	nim = 0
	for x in piles:
		nim ^= x
	return "first" if nim != 0 else "second"

class You:
	def __init__(self, V, edges):
		Server(f"{V = }")
		Server(f"{edges = }")
	def first_move(self):
		Server("Please choose S")
		return sorted(list(map(int, input("You> S = ").strip().split(" "))))
	def read_first_move(self, S):
		Rin(f"I choose S = {' '.join([str(i) for i in S])}")
	def second_move(self):
		Server("Please choose T")
		return sorted(list(map(int, input("You> T = ").strip().split(" "))))

Rin("Do you want this flag?")
Rin("I'll consider giving it to you if you defeat me 200 times :)")

time.sleep(0.5)

Server("-----------------------------------------------------------------------------------------")
Server("[Round Manual]")
Server("1. The server generates a set of edges with integer weight on vertices 0 ~ V-1.")
Server("2. You can either choose to go first or second.")
Server("3. First player chooses a subset S of edges of size V-1 which forms a tree.")
Server("( For the definition of tree, see https://en.wikipedia.org/wiki/Tree_(graph_theory) )")
Server("4. Second player chooses a non-empty subset T of S.")
Server("5. Add a pile consisting of w stones for each edge (u, v, w) in T.")
Server("6. Winner of the round is the winner of the nim game on those set of piles.")
Server("-----------------------------------------------------------------------------------------")

time.sleep(0.5)

Rin("GLHF!")

time.sleep(0.5)

for round_number in range(1, 201):
	Server(f"Round {round_number}")

	V, edges = generate_graph(round_number)
	assert isinstance(V, int)
	assert 30 <= V <= 200
	assert len(edges) <= 300
	for u, v, w in edges:
		assert isinstance(u, int) and isinstance(v, int) and isinstance(w, int)
		assert 0 <= u < V and 0 <= v < V and 0 <= w < 2**(V-1)

	first, second = You(V, edges), NanakuraRin(V, edges)
	
	Rin("Do you want to go [first] or [second]?")
	resp = input("You> ").strip()
	if resp not in ["first", "second"]:
		Rin("That's not an option >:(")
		exit(0)

	if resp == "first":
		Rin("Sure, you go first :D")
	else:
		Rin("Ok, I go first :D")
		first, second = second, first

	S = first.first_move()
	second.read_first_move(S)
	check_subset(S, [i for i in range(len(edges))])
	check_tree(S, V, edges)

	if resp == "first":
		Rin("My turn!")
	else:
		Rin("Your turn!")

	T = second.second_move()
	check_subset(T, S)

	if resp == "first":
		Rin(f"I choose T = {' '.join([str(i) for i in T])}")

	winner = determine_the_winner([edges[i][2] for i in T])

	r = Random()

	if winner != resp:
		Rin(r.choice(["Git gud", "Noob", "Easy"]))
		exit(0)

	Rin(r.choice(["Not like this!", "You won :(", "Ouch!", "You got lucky this time."]))

Rin("GG Well played!")
Rin("I guess I have no choice but to give you the flag.")
Rin(f"{flag}")5:["$","div",null,{"children":["$","main",null,{"className":"text-pretty max-w-5xl mx-auto text-sm [&_h1]:text-5xl [&_h1]:font-semibold [&_h1]:mb-8 [&_blockquote]:text-secondary [&_blockquote]:space-y-3 [&_blockquote]:border-l-4 [&_blockquote]:border-secondary [&_blockquote]:pl-5 [&_blockquote]:mb-5 [&>_p]:my-4 [&_img]:my-5 [&_ul]:list-disc [&_ul]:pl-6 [&_ol]:list-decimal [&_ol]:pl-6 [&_img]:rounded [&_li]:my-2","children":[["$","h1","h1-0",{"children":"CyberSpace CTF 2024 — Game with Rin"}],"\n",["$","blockquote","blockquote-0",{"children":["\n",["$","p","p-0",{"children":"Nanakura Rin, a very skilled gamer, took one of the flags. You need to defeat her 200 times to get the flag back."}],"\n",["$","p","p-1",{"children":["$","code","code-0",{"className":"opacity-75 bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"nc game-with-rin.challs.csc.tf 1337"}]}],"\n"]}],"\n",["$","p","p-0",{"children":"We're given a Python server that looks like this:"}],"\n",["$","$L10","pre-0",{"className":"my-2","children":"$11","language":"py"}],"\n","$L12","\n","$L13","\n","$L14","\n","$L15","\n","$L16","\n","$L17"]}]}]
12:["$","p","p-1",{"children":"On paper, the game works as follows:"}]
13:["$","ul","ul-0",{"children":["\n",["$","li","li-0",{"children":["The server picks a ",["$","code","code-0",{"className":"opacity-75 bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"V"}]," and generates random weighted edges between those nodes."]}],"\n",["$","li","li-1",{"children":"We choose whether to go first or second."}],"\n",["$","li","li-2",{"children":["Player 1 chooses a subset of size ",["$","code","code-0",{"className":"opacity-75 bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"V - 1"}]," that forms a tree."]}],"\n",["$","li","li-3",{"children":"Player 2 chooses a arbitrary (non-empty) subset of player 1's choice."}],"\n",["$","li","li-4",{"children":["This final subset is translated into ",["$","a","a-0",{"href":"https://en.wikipedia.org/wiki/Nim","children":"Nim piles"}],", and the player who wins Nim wins the round."]}],"\n"]}]
14:["$","p","p-2",{"children":"Unfortunately, there doesn't seem to be duplicate protection in the subset choosing: we can always go second, and pick the same edge twice to guarantee that XOR of the weights = 0 and we win Nim."}]
15:["$","p","p-3",{"children":"Here's a script that does just that:"}]
16:["$","$L10","pre-1",{"className":"my-2","children":"import pwn\n\nconn = pwn.remote('game-with-rin.challs.csc.tf', 1337)\n\n# Solve proof of work\nres = conn.recvuntil(b'Solution?')\nprint(res)\nsol = input('Solution: ')\nconn.sendline(sol.encode())\n\nfor i in range(200):\n    conn.recvuntil(b'Rin> Do you want to go [first] or [second]?')\n    conn.sendline(b'second')\n\n    conn.recvuntil(b'Rin> I choose S = ')\n    first = conn.recvline().decode().split(\" \")[0]\n    conn.sendline(f'{first} {first}'.encode())\n\n    print(i, conn.recvline().strip().decode())\n\nprint(conn.recvall().decode())","language":"py"}]
18:T49c,[x] Opening connection to game-with-rin.challs.csc.tf on port 1337
[x] Opening connection to game-with-rin.challs.csc.tf on port 1337: Trying 34.47.157.234
[+] Opening connection to game-with-rin.challs.csc.tf on port 1337: Done
b'== proof-of-work: enabled ==\nplease solve a pow first\nYou can run the solver with:\n    python3 <(curl -sSL https://goo.gle/kctf-pow) solve s.AE5X.AAD7HTl9L2wrq2RmljReSe+H\n===================\n\nSolution?'
Solution: s.AAAO+qBXiJTTaK0jlC9QLDOQlE+eLqJ2cuvjB9Xh6+m49FO/xJpKU+hdTKqF+QKTIlF1pDhU7X3+uSJfkUocg6Pv49kIvWSbuFX7GJg5G4wf+XrZTZCKQcRZMNT9savz2AIKAE4vEYZ3Y5qrj/Uk769dgIGqoa1yC/pkhcRCtBMmS75pFUgsITcvUaJ0j0BZVuLgb+X35Q8uLdC0ktJFX2+O
0 Rin> Your turn!
1 Rin> Your turn!
2 Rin> Your turn!
...
196 Rin> Your turn!
197 Rin> Your turn!
198 Rin> Your turn!
199 Rin> Your turn!
[x] Receiving all data
[x] Receiving all data: 33B
[x] Receiving all data: 195B
[+] Receiving all data: Done (195B)
[*] Closed connection to game-with-rin.challs.csc.tf port 1337
Server> Please choose T
You> T = Rin> You got lucky this time.
Rin> GG Well played!
Rin> I guess I have no choice but to give you the flag.
Rin> CSCTF{I_just_wanted_to_spend_time_with_you_baka!}17:["$","$L10","pre-2",{"className":"my-2","children":"$18","language":"$undefined"}]
9:{"metadata":[["$","title","0",{"children":"CyberSpace CTF 2024 — Game with Rin | kevin.fish"}],["$","meta","1",{"name":"description","content":"Nanakura Rin, a very skilled gamer, took one of the flags. You need to defeat her 200 times to get the flag back."}],["$","meta","2",{"property":"og:title","content":"CyberSpace CTF 2024 — Game with Rin"}],["$","meta","3",{"property":"og:description","content":"Nanakura Rin, a very skilled gamer, took one of the flags. You need to defeat her 200 times to get the flag back."}],["$","meta","4",{"name":"twitter:card","content":"summary"}],["$","meta","5",{"name":"twitter:title","content":"CyberSpace CTF 2024 — Game with Rin"}],["$","meta","6",{"name":"twitter:description","content":"Nanakura Rin, a very skilled gamer, took one of the flags. You need to defeat her 200 times to get the flag back."}]],"error":null,"digest":"$undefined"}
e:"$9:metadata"
