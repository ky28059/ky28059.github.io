1:"$Sreact.fragment"
2:I[87555,[],""]
3:I[31295,[],""]
4:I[6874,["874","static/chunks/874-c62c375efd21db20.js","319","static/chunks/app/writeups/layout-0d6432ad4376bd82.js"],""]
6:I[59665,[],"MetadataBoundary"]
8:I[59665,[],"OutletBoundary"]
b:I[74911,[],"AsyncMetadataOutlet"]
d:I[59665,[],"ViewportBoundary"]
f:I[26614,[],""]
:HL["/_next/static/media/e4af272ccee01ff0-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/b41869de3b22c447.css","style"]
0:{"P":null,"b":"NtM4hj5y3IN8pkVEe4T_n","p":"","c":["","writeups","2f279fff831a5be3d6b5fbb8a6d86057"],"i":false,"f":[[["",{"children":["writeups",{"children":[["id","2f279fff831a5be3d6b5fbb8a6d86057","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/b41869de3b22c447.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"className":"dark scroll-smooth","children":[["$","head",null,{"children":["$","meta",null,{"charSet":"utf-8"}]}],["$","body",null,{"className":"text-dark dark:text-white dark:bg-midnight","style":{"fontFamily":"'Inter', 'Inter Fallback'","fontStyle":"normal"},"children":["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","div",null,{"className":"h-screen flex items-center justify-center","children":["$","main",null,{"className":"relative pl-14","children":[["$","svg",null,{"stroke":"currentColor","fill":"currentColor","strokeWidth":"0","viewBox":"0 0 512 512","className":"absolute left-0 top-2 text-5xl text-grapefruit","children":["$undefined",[["$","path","0",{"d":"M256 48C140.559 48 48 140.559 48 256c0 115.436 92.559 208 208 208 115.435 0 208-92.564 208-208 0-115.441-92.564-208-208-208zm104.002 282.881l-29.12 29.117L256 285.117l-74.881 74.881-29.121-29.117L226.881 256l-74.883-74.881 29.121-29.116L256 226.881l74.881-74.878 29.12 29.116L285.119 256l74.883 74.881z","children":"$undefined"}]]],"style":{"color":"$undefined"},"height":"1em","width":"1em","xmlns":"http://www.w3.org/2000/svg"}],["$","h1",null,{"className":"font-bold text-7xl underline decoration-grapefruit mb-5","children":"404."}],["$","p",null,{"children":"Your requested page was not found."}],["$","$L4",null,{"href":"/","className":"font-medium text-inherit","children":"Return to home ‚Üí"}]]}]}],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]]}]]}],{"children":["writeups",["$","$1","c",{"children":[null,["$","main",null,{"className":"container pt-20 pb-24","children":[["$","$L4",null,{"href":"/","className":"text-secondary text-sm mb-10 -ml-5 block w-max","children":"‚Üê Back to home"}],["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}]]}],{"children":[["id","2f279fff831a5be3d6b5fbb8a6d86057","d"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L5",["$","$L6",null,{"children":"$L7"}],null,["$","$L8",null,{"children":["$L9","$La",["$","$Lb",null,{"promise":"$@c"}]]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","Djj386SooM2zVetcawGcy",{"children":[["$","$Ld",null,{"children":"$Le"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}],null]}],false]],"m":"$undefined","G":["$f","$undefined"],"s":false,"S":true}
10:"$Sreact.suspense"
11:I[74911,[],"AsyncMetadata"]
7:["$","$10",null,{"fallback":null,"children":["$","$L11",null,{"promise":"$@12"}]}]
a:null
e:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
9:null
12:{"metadata":[["$","title","0",{"children":"kevin.fish"}]],"error":null,"digest":"$undefined"}
c:{"metadata":"$12:metadata","error":null,"digest":"$undefined"}
13:I[50674,["325","static/chunks/325-8cc74193b249521f.js","134","static/chunks/app/writeups/%5Bid%5D/page-d2275216898ea7fa.js"],"default"]
14:T153b,from flask import Flask, request, render_template
from flask_socketio import SocketIO, emit
from stockfish import Stockfish
import random

import chess
from stockfish import Stockfish

games = {}

toxic_msges = [
    "?",
    "rip bozo",
    "so bad lmfaoo",
    "ez",
    "skill issue",
    "mad cuz bad",
    "hold this L",
    "L + ratio + you fell off",
    "i bet your main category is stego",
    "have you tried alt+f4?",
    "ü§°ü§°ü§°"
]

win_msges = [
    "lmaooooooooo ur so bad",
    "was that it?",
    "zzzzzzzzzzzzzzzzzzzzzz",
    "hopefully the next game wont be so quick",
    "nice try - jk that was horrible",
    "this aint checkers man"
]

TURN_LIMIT = 15
STOCKFISH_DEPTH = 21
FLAG = "corctf{this_is_a_fake_flag}"

class GameWrapper:
    def __init__(self, emit):
        self.emit = emit
        self.board = chess.Board(chess.STARTING_FEN)
        self.moves = []
        self.player_turn = True

    def get_player_state(self):
        legal_moves = [f"{m}" for m in self.board.legal_moves] if self.player_turn and self.board.fullmove_number < TURN_LIMIT else []

        status = "running"
        if self.board.fullmove_number >= TURN_LIMIT:
            status = "turn limit"

        if outcome := self.board.outcome():
            if outcome.winner is None:
                status = "draw"
            else:
                status = "win" if outcome.winner == chess.WHITE else "lose"

        return {
            "pos": self.board.fen(),
            "moves": legal_moves,
            "your_turn": self.player_turn,
            "status": status,
            "turn_counter": f"{self.board.fullmove_number} / {TURN_LIMIT} turns"
        }

    def play_move(self, uci):
        if not self.player_turn:
            return
        if self.board.fullmove_number >= TURN_LIMIT:
            return
        
        self.player_turn = False

        outcome = self.board.outcome()
        if outcome is None:
            try:
                move = chess.Move.from_uci(uci)
                if move:
                    if move not in self.board.legal_moves:
                        self.player_turn = True
                        self.emit('state', self.get_player_state())
                        self.emit("chat", {"name": "System", "msg": "Illegal move"})
                        return
                    self.board.push_uci(uci)
            except:
                self.player_turn = True
                self.emit('state', self.get_player_state())
                self.emit("chat", {"name": "System", "msg": "Invalid move format"})
                return
        elif outcome.winner != chess.WHITE:
            self.emit("chat", {"name": "üê∏", "msg": "you lost, bozo"})
            return

        self.moves.append(uci)

        # stockfish has a habit of crashing
        # The following section is used to try to resolve this
        opponent_move, attempts = None, 0
        while not opponent_move and attempts <= 10:
            try:
                attempts += 1
                engine = Stockfish("./stockfish/stockfish-ubuntu-x86-64-avx2", parameters={"Threads": 4}, depth=STOCKFISH_DEPTH)
                for m in self.moves:
                    if engine.is_move_correct(m):
                        engine.make_moves_from_current_position([m])
                opponent_move = engine.get_best_move_time(3_000)
            except:
                pass

        if opponent_move != None:
            self.moves.append(opponent_move)
            opponent_move = chess.Move.from_uci(opponent_move)
            if self.board.is_capture(opponent_move):
                self.emit("chat", {"name": "üê∏", "msg": random.choice(toxic_msges)})
            self.board.push(opponent_move)
            self.player_turn = True
            self.emit("state", self.get_player_state())

            if (outcome := self.board.outcome()) is not None:
                if outcome.termination == chess.Termination.CHECKMATE:
                    if outcome.winner == chess.BLACK:
                        self.emit("chat", {"name": "üê∏", "msg": "Nice try... but not good enough üê∏"})
                    else:
                        self.emit("chat", {"name": "üê∏", "msg": "how??????"})
                        self.emit("chat", {"name": "System", "msg": FLAG})
                else: # statemate, insufficient material, etc
                    self.emit("chat", {"name": "üê∏", "msg": "That was close... but still not good enough üê∏"})
        else:
            self.emit("chat", {"name": "System", "msg": "An error occurred, please restart"})

app = Flask(__name__, static_url_path='', static_folder='static')
socketio = SocketIO(app, cors_allowed_origins='*')

@app.after_request
def add_header(response):
    response.headers['Cache-Control'] = 'max-age=604800'
    return response

@app.route('/')
def index_route():
    return render_template('index.html')

@socketio.on('connect')
def on_connect(_):
    games[request.sid] = GameWrapper(emit)
    emit('state', games[request.sid].get_player_state())

@socketio.on('disconnect')
def on_disconnect():
    if request.sid in games:
        del games[request.sid]

@socketio.on('move')
def onmsg_move(move):
    try:
        games[request.sid].play_move(move)
    except:
        emit("chat", {"name": "System", "msg": "An error occurred, please restart"})

@socketio.on('state')
def onmsg_state():
    emit('state', games[request.sid].get_player_state())15:T4b6,    @classmethod
    def from_uci(cls, uci: str) -> Move:
        """
        Parses a UCI string.

        :raises: :exc:`InvalidMoveError` if the UCI string is invalid.
        """
        if uci == "0000":
            return cls.null()
        elif len(uci) == 4 and "@" == uci[1]:
            try:
                drop = PIECE_SYMBOLS.index(uci[0].lower())
                square = SQUARE_NAMES.index(uci[2:])
            except ValueError:
                raise InvalidMoveError(f"invalid uci: {uci!r}")
            return cls(square, square, drop=drop)
        elif 4 <= len(uci) <= 5:
            try:
                from_square = SQUARE_NAMES.index(uci[0:2])
                to_square = SQUARE_NAMES.index(uci[2:4])
                promotion = PIECE_SYMBOLS.index(uci[4]) if len(uci) == 5 else None
            except ValueError:
                raise InvalidMoveError(f"invalid uci: {uci!r}")
            if from_square == to_square:
                raise InvalidMoveError(f"invalid uci (use 0000 for null moves): {uci!r}")
            return cls(from_square, to_square, promotion=promotion)
        else:
            raise InvalidMoveError(f"expected uci string to be of length 4 or 5: {uci!r}")5:["$","div",null,{"children":["$","main",null,{"className":"max-w-5xl mx-auto text-sm [&_h1]:text-5xl [&_h1]:font-semibold [&_h1]:mb-8 [&_blockquote]:text-secondary [&_blockquote]:space-y-3 [&_blockquote]:border-l-4 [&_blockquote]:border-secondary [&_blockquote]:pl-5 [&_blockquote]:mb-5 [&>_p]:my-3 [&_img]:my-5 [&_ul]:list-disc [&_ul]:pl-6 [&_img]:rounded [&_li]:my-2","children":[["$","h1","h1-0",{"children":"corCTF 2024 ‚Äî msfrogofwar3"}],"\n",["$","blockquote","blockquote-0",{"children":["\n",["$","p","p-0",{"children":["$","img","img-0",{"src":"https://gist.github.com/user-attachments/assets/e9359b7e-f3cf-4a25-8eea-c82b9ab65912","alt":"image"}]}],"\n"]}],"\n",["$","p","p-0",{"children":"We're given a Flask server that looks like this:"}],"\n",["$","$L13","pre-0",{"className":"my-4","children":"$14","language":"py"}],"\n",["$","p","p-1",{"children":"At first glance, it looks like we need to win against Stockfish in 15 moves to get the flag."}],"\n",["$","p","p-2",{"children":["Obviously, winning against max-difficulty Stockfish, much less in 15 moves, is impossible. Curiously, however, the server uses ",["$","a","a-0",{"href":"https://python-chess.readthedocs.io/en/latest/","children":"python-chess"}],"'s ",["$","code","code-0",{"className":"text-primary bg-black/20 rounded p-1","children":"Move"}]," class to verify game inputs. Reading the ",["$","a","a-1",{"href":"https://github.com/niklasf/python-chess/blob/32253d6cfdbc1939f78f03892fa848412cf4b4fa/chess/__init__.py#L686","children":["source for ",["$","code","code-0",{"className":"text-primary bg-black/20 rounded p-1","children":"Move.from_uci"}]]}],","]}],"\n",["$","$L13","pre-1",{"className":"my-4","children":"$15","language":"py"}],"\n",["$","p","p-3",{"children":["we can send a \"null move\" ",["$","code","code-0",{"className":"text-primary bg-black/20 rounded p-1","children":"0000"}]," to pass the turn to Stockfish. Afterwards, Stockfish will play white and we will play black; all we need to do is get checkmated to \"win\"!"]}],"\n",["$","p","p-4",{"children":["$","img","img-0",{"src":"https://gist.github.com/user-attachments/assets/8a765e88-8838-49ae-bc11-91094fc83f97","alt":"image"}]}],"\n",["$","$L13","pre-2",{"className":"my-4","children":"socket.emit('move', '0000')\nsocket.emit('move', 'f7f6')\nsocket.emit('move', 'g7g5')","language":"js"}],"\n",["$","p","p-5",{"children":["Unfortunately, winning is only part one of the challenge; the flag printed to the chat is fake, and looking in ",["$","code","code-0",{"className":"text-primary bg-black/20 rounded p-1","children":"run-docker.sh"}],", the real flag lies in the ",["$","code","code-1",{"className":"text-primary bg-black/20 rounded p-1","children":"FLAG"}]," environment variable passed to ",["$","code","code-2",{"className":"text-primary bg-black/20 rounded p-1","children":"docker run"}],":"]}],"\n",["$","$L13","pre-3",{"className":"my-4","children":"#!/bin/sh\ndocker build . -t msfrogofwar3\ndocker run --rm -it -p 8080:8080 -e FLAG=corctf{real_flag} --name msfrogofwar3 msfrogofwar3","language":"sh"}],"\n",["$","p","p-6",{"children":["However, looking again at the ",["$","code","code-0",{"className":"text-primary bg-black/20 rounded p-1","children":"play_move"}]," method in the game server,"]}],"\n",["$","$L13","pre-4",{"className":"my-4","children":"        outcome = self.board.outcome()\n        if outcome is None:\n            try:\n                move = chess.Move.from_uci(uci)\n                if move:\n                    if move not in self.board.legal_moves:\n                        self.player_turn = True\n                        self.emit('state', self.get_player_state())\n                        self.emit(\"chat\", {\"name\": \"System\", \"msg\": \"Illegal move\"})\n                        return\n                    self.board.push_uci(uci)\n            except:\n                self.player_turn = True\n                self.emit('state', self.get_player_state())\n                self.emit(\"chat\", {\"name\": \"System\", \"msg\": \"Invalid move format\"})\n                return\n        elif outcome.winner != chess.WHITE:\n            self.emit(\"chat\", {\"name\": \"üê∏\", \"msg\": \"you lost, bozo\"})\n            return\n\n        self.moves.append(uci)","language":"py"}],"\n",["$","p","p-7",{"children":["it looks like winning lets us push unchecked moves to ",["$","code","code-0",{"className":"text-primary bg-black/20 rounded p-1","children":"self.moves"}],", which then get passed to ",["$","code","code-1",{"className":"text-primary bg-black/20 rounded p-1","children":"engine.is_move_correct"}],":"]}],"\n",["$","$L13","pre-5",{"className":"my-4","children":"        while not opponent_move and attempts <= 10:\n            try:\n                attempts += 1\n                engine = Stockfish(\"./stockfish/stockfish-ubuntu-x86-64-avx2\", parameters={\"Threads\": 4}, depth=STOCKFISH_DEPTH)\n                for m in self.moves:\n                    if engine.is_move_correct(m):\n                        engine.make_moves_from_current_position([m])\n                opponent_move = engine.get_best_move_time(3_000)","language":"py"}],"\n",["$","p","p-8",{"children":["The server uses the ",["$","a","a-0",{"href":"https://pypi.org/project/stockfish/","children":"stockfish"}]," python library, which ",["$","a","a-1",{"href":"https://github.com/zhelyabuzhsky/stockfish/blob/master/stockfish/models.py#L47-L53","children":"uses a subprocess to launch and communicate with the Stockfish engine"}],"."]}],"\n",["$","$L13","pre-6",{"className":"my-4","children":"        self._stockfish = subprocess.Popen(\n            self._path,\n            universal_newlines=True,\n            stdin=subprocess.PIPE,\n            stdout=subprocess.PIPE,\n            stderr=subprocess.STDOUT,\n        )","language":"py"}],"\n",["$","p","p-9",{"children":["Reading the stockfish library ",["$","a","a-0",{"href":"https://github.com/zhelyabuzhsky/stockfish/blob/master/stockfish/models.py#L420","children":["source code for ",["$","code","code-0",{"className":"text-primary bg-black/20 rounded p-1","children":"is_move_correct"}]]}],","]}],"\n",["$","$L13","pre-7",{"className":"my-4","children":"    def is_move_correct(self, move_value: str) -> bool:\n        \"\"\"Checks new move.\n\n        Args:\n            move_value:\n              New move value in algebraic notation.\n\n        Returns:\n            True, if new move is correct, else False.\n        \"\"\"\n        old_self_info = self.info\n        self._put(f\"go depth 1 searchmoves {move_value}\")\n        is_move_correct = self._get_best_move_from_sf_popen_process() is not None\n        self.info = old_self_info\n        return is_move_correct","language":"py"}],"\n",["$","$L13","pre-8",{"className":"my-4","children":"    def _put(self, command: str) -> None:\n        if not self._stockfish.stdin:\n            raise BrokenPipeError()\n        if self._stockfish.poll() is None and not self._has_quit_command_been_sent:\n            self._stockfish.stdin.write(f\"{command}\\n\")\n            self._stockfish.stdin.flush()\n            if command == \"quit\":\n                self._has_quit_command_been_sent = True","language":"py"}],"\n",["$","p","p-10",{"children":["Therefore, by circumventing the move checking, we can control ",["$","code","code-0",{"className":"text-primary bg-black/20 rounded p-1","children":"move_value"}]," and send arbitrary commands to the Stockfish process."]}],"\n",["$","p","p-11",{"children":["Stockfish documents its supported UCI commands and functionality ",["$","a","a-0",{"href":"https://disservin.github.io/stockfish-docs/stockfish-wiki/UCI-&-Commands.html","children":"here"}],". Of particular note is"]}],"\n",["$","$L13","pre-9",{"className":"my-4","children":"setoption name Debug Log File value [file path]","language":"$undefined"}],"\n",["$","p","p-12",{"children":"which causes Stockfish to log all incoming and outbound interactions to the specified file path. We can get a simple proof-of-concept attack by making Stockfish log to the configured Flask static dir:"}],"\n",["$","p","p-13",{"children":["$","img","img-0",{"src":"https://gist.github.com/user-attachments/assets/d2a5ca54-7c35-46d8-abcf-18a8d17792f8","alt":"image"}]}],"\n",["$","p","p-14",{"children":["As ",["$","a","a-0",{"href":"https://blog.neilhommes.xyz/docs/Writeups/2024/corctf.html","children":"Neil's follow-up writeup explains in more detail"}],", we can use this arbitrary file write to overwrite the contents of ",["$","code","code-0",{"className":"text-primary bg-black/20 rounded p-1","children":"/app/templates/index.html"}]," (making sure to do this before Flask caches the template on initial page load). Then, we just need to execute a Flask SSTI attack to get the flag."]}],"\n",["$","$L13","pre-10",{"className":"my-4","children":"corctf{‚ÄúWhatever you do, don‚Äôt reveal all your techniques in a CTF challenge, you fool, you moron.‚Äù - Sun Tzu, The Art of War}","language":"$undefined"}]]}]}]
