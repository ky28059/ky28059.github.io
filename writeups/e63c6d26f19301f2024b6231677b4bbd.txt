1:"$Sreact.fragment"
2:I[87555,[],""]
3:I[31295,[],""]
4:I[6874,["874","static/chunks/874-c62c375efd21db20.js","319","static/chunks/app/writeups/layout-0d6432ad4376bd82.js"],""]
6:I[59665,[],"MetadataBoundary"]
8:I[59665,[],"OutletBoundary"]
b:I[74911,[],"AsyncMetadataOutlet"]
d:I[59665,[],"ViewportBoundary"]
f:I[26614,[],""]
:HL["/_next/static/media/e4af272ccee01ff0-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/9ae1c3541e2b8fd8.css","style"]
0:{"P":null,"b":"joJrwkpbKjBdtt5PZQ6uf","p":"","c":["","writeups","e63c6d26f19301f2024b6231677b4bbd"],"i":false,"f":[[["",{"children":["writeups",{"children":[["id","e63c6d26f19301f2024b6231677b4bbd","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/9ae1c3541e2b8fd8.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"className":"dark scroll-smooth","children":[["$","head",null,{"children":["$","meta",null,{"charSet":"utf-8"}]}],["$","body",null,{"className":"text-dark dark:text-white dark:bg-midnight","style":{"fontFamily":"'Inter', 'Inter Fallback'","fontStyle":"normal"},"children":["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","div",null,{"className":"h-screen flex items-center justify-center","children":["$","main",null,{"className":"relative pl-14","children":[["$","svg",null,{"stroke":"currentColor","fill":"currentColor","strokeWidth":"0","viewBox":"0 0 512 512","className":"absolute left-0 top-2 text-5xl text-grapefruit","children":["$undefined",[["$","path","0",{"d":"M256 48C140.559 48 48 140.559 48 256c0 115.436 92.559 208 208 208 115.435 0 208-92.564 208-208 0-115.441-92.564-208-208-208zm104.002 282.881l-29.12 29.117L256 285.117l-74.881 74.881-29.121-29.117L226.881 256l-74.883-74.881 29.121-29.116L256 226.881l74.881-74.878 29.12 29.116L285.119 256l74.883 74.881z","children":"$undefined"}]]],"style":{"color":"$undefined"},"height":"1em","width":"1em","xmlns":"http://www.w3.org/2000/svg"}],["$","h1",null,{"className":"font-bold text-7xl underline decoration-grapefruit mb-5","children":"404."}],["$","p",null,{"children":"Your requested page was not found."}],["$","$L4",null,{"href":"/","className":"font-medium text-inherit","children":"Return to home →"}]]}]}],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]]}]]}],{"children":["writeups",["$","$1","c",{"children":[null,["$","main",null,{"className":"container pt-20 pb-24","children":[["$","$L4",null,{"href":"/","className":"text-secondary text-sm mb-10 -ml-5 block w-max","children":"← Back to home"}],["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}]]}],{"children":[["id","e63c6d26f19301f2024b6231677b4bbd","d"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L5",["$","$L6",null,{"children":"$L7"}],null,["$","$L8",null,{"children":["$L9","$La",["$","$Lb",null,{"promise":"$@c"}]]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","ht4FzGSUnBvTV1gdZFWcD",{"children":[["$","$Ld",null,{"children":"$Le"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}],null]}],false]],"m":"$undefined","G":["$f","$undefined"],"s":false,"S":true}
10:"$Sreact.suspense"
11:I[74911,[],"AsyncMetadata"]
7:["$","$10",null,{"fallback":null,"children":["$","$L11",null,{"promise":"$@12"}]}]
a:null
e:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
9:null
12:{"metadata":[["$","title","0",{"children":"kevin.fish"}]],"error":null,"digest":"$undefined"}
c:{"metadata":"$12:metadata","error":null,"digest":"$undefined"}
13:I[50674,["325","static/chunks/325-8cc74193b249521f.js","134","static/chunks/app/writeups/%5Bid%5D/page-d2275216898ea7fa.js"],"default"]
14:T8dd,#!/usr/bin/env python3

import io
import random
import string
from collections import Counter, defaultdict

with open('flag.txt', 'r') as f:
    flag = f.read()

def generate_fake_flag():
    return 'ictf{' + ''.join([
        random.choice(string.ascii_lowercase + string.digits + '_-') for _ in range(20)
    ]) + '}'

def derive_markov_model(texts):
    probabilities = defaultdict(Counter)
    for text in texts:
        for a, b in zip(text[:-1], text[1:]):
            probabilities[a][b] += 1

    return probabilities

def predict_next_char(model, prefix):
    if not prefix:
        prefix = 'ictf{'

    last_char = prefix[-1]
    if last_char not in model:
        return random.choice(string.ascii_lowercase + '_')
    else:
        options = model[last_char]
        options_str = ''.join(c * cnt for c, cnt in options.items())
        return random.choice(options_str)

def finish_flag(model, prefix):
    flag = prefix
    while flag[-1] != '}' and len(flag) < 30:
        flag += predict_next_char(model, flag)
    if flag[-1] != '}':
        flag += '}'
    return flag

def main():
    num_datapoints = int(input("How many training samples would you like?\n"))
    percent_real = int(input("What percentage of training flags would you like to be included to make the flags look real? (max 20%)\n"))
    assert 0 <= percent_real <= 20

    num_times_real = int(num_datapoints * (percent_real / 100))
    num_times_fake = num_datapoints - num_times_real

    dataset = [flag] * num_times_real + [generate_fake_flag() for _ in range(num_times_fake)]

    print("Understood, training the model...")
    # import ipdb; ipdb.set_trace()
    model = derive_markov_model(dataset)

    print("Done! Now, how many flags would you like to generate?")
    num_flags = int(input())
    if num_flags > 10000:
        print("Sorry, that's too many flags.")
        return
    print("Here you go:")
    for _ in range(num_flags):
        print(finish_flag(model, 'ictf{'))

    print("Thanks for using our service! Now, if you were by some incredible chance able to find the flag, you have one chance to confirm that it's correct.")
    if input("Flag: ") == flag:
        print("Correct!")
    else:
        print("Incorrect!")

if __name__ == '__main__':
    main()5:["$","div",null,{"children":["$","main",null,{"className":"max-w-5xl mx-auto text-sm [&_h1]:text-5xl [&_h1]:font-semibold [&_h1]:mb-8 [&_blockquote]:text-secondary [&_blockquote]:space-y-3 [&_blockquote]:border-l-4 [&_blockquote]:border-secondary [&_blockquote]:pl-5 [&_blockquote]:mb-5 [&>_p]:my-3 [&_img]:my-5 [&_ul]:list-disc [&_ul]:pl-6 [&_img]:rounded [&_li]:my-2","children":[["$","h1","h1-0",{"children":"iCTF 2023 — escape_from_markov"}],"\n",["$","blockquote","blockquote-0",{"children":["\n",["$","p","p-0",{"children":"We made a fake flag generator just for this CTF! It can generate flags that look like the real one! Can you find the real flag?"}],"\n",["$","p","p-1",{"children":["$","code","code-0",{"className":"text-primary bg-black/20 rounded p-1","children":"nc 0.cloud.chals.io 34879"}]}],"\n"]}],"\n",["$","p","p-0",{"children":"We're given a Python server that looks like this:"}],"\n",["$","$L13","pre-0",{"className":"my-4","children":"$14","language":"py"}],"\n",["$","p","p-1",{"children":["Based on the challenge title and the provided source code, it looks like the flag is loaded into a ",["$","a","a-0",{"href":"https://en.wikipedia.org/wiki/Markov_chain","children":"Markov chain"}],"\nthat we get to query generated flags from."]}],"\n",["$","p","p-2",{"children":"We can connect to the server and sample 10,000 flags from the Markov chain output, then analyze weights for each character in the chain:"}],"\n",["$","$L13","pre-1",{"className":"my-4","children":"import collections\n\nmarkov = {}\n\nwith open(\"out.txt\") as f:\n    lines = [x.strip()[5:] for x in f.readlines()]\n\nprint(lines)\nfor line in lines:\n    for i in range(len(line) - 1):\n        if not (line[i] in markov):\n            markov[line[i]] = collections.Counter()\n        markov[line[i]][line[i + 1]] += 1\n\nfor x, v in markov.items():\n    print(f\"{x}: , {v.most_common(5)}\")","language":"py"}],"\n",["$","p","p-3",{"children":["(assuming generated flags are saved in ",["$","code","code-0",{"className":"text-primary bg-black/20 rounded p-1","children":"out.txt"}],")"]}],"\n","<img src=\"https://gist.github.com/assets/60120929/8cf8fab8-aaee-4d26-a65e-1eac9beb6834\" width=\"450px\">","\n",["$","p","p-4",{"children":["Starting from ",["$","code","code-0",{"className":"text-primary bg-black/20 rounded p-1","children":"i"}]," (because of ",["$","code","code-1",{"className":"text-primary bg-black/20 rounded p-1","children":"ictf"}],") and following the most probable next letter, we get"]}],"\n",["$","$L13","pre-2",{"className":"my-4","children":"ictf{ma","language":"$undefined"}],"\n",["$","p","p-5",{"children":["Once we reach ",["$","code","code-0",{"className":"text-primary bg-black/20 rounded p-1","children":"a"}],", however, there seem to be 3 options with roughly similar probability. Before resolving this, we can work\nbackwards from ",["$","code","code-1",{"className":"text-primary bg-black/20 rounded p-1","children":"}"}]," to get"]}],"\n",["$","$L13","pre-3",{"className":"my-4","children":"ictf{ma ... aR3s}","language":"$undefined"}],"\n",["$","p","p-6",{"children":["Starting from ",["$","code","code-0",{"className":"text-primary bg-black/20 rounded p-1","children":"n"}],", the sequence is"]}],"\n",["$","$L13","pre-4",{"className":"my-4","children":"n_N1","language":"$undefined"}],"\n",["$","p","p-7",{"children":["with ",["$","code","code-0",{"className":"text-primary bg-black/20 rounded p-1","children":"g"}]," or ",["$","code","code-1",{"className":"text-primary bg-black/20 rounded p-1","children":"a"}]," potentially following. Starting from ",["$","code","code-2",{"className":"text-primary bg-black/20 rounded p-1","children":"g"}],", the sequence is"]}],"\n",["$","$L13","pre-5",{"className":"my-4","children":"gh7ma","language":"$undefined"}],"\n",["$","p","p-8",{"children":"So putting the 3 sequences together to resemble a roughly english word, we can infer the end of the flag looks like"}],"\n",["$","$L13","pre-6",{"className":"my-4","children":"ictf{ma ... n_N1gh7maR3s}","language":"$undefined"}],"\n",["$","p","p-9",{"children":["Then, because ",["$","code","code-0",{"className":"text-primary bg-black/20 rounded p-1","children":"R"}]," cannot follow ",["$","code","code-1",{"className":"text-primary bg-black/20 rounded p-1","children":"ma"}]," (as that would make the flag ",["$","code","code-2",{"className":"text-primary bg-black/20 rounded p-1","children":"ictf{maR3s}"}],", ending it early and rendering it nonsensical)\nand because ",["$","code","code-3",{"className":"text-primary bg-black/20 rounded p-1","children":"n"}]," likely does not immediately follow ",["$","code","code-4",{"className":"text-primary bg-black/20 rounded p-1","children":"ma"}]," (as that would make the flag ",["$","code","code-5",{"className":"text-primary bg-black/20 rounded p-1","children":"ictf{man_N1gh7maR3s}"}],", which is a bit suspicious),\nthe next character must then be ",["$","code","code-6",{"className":"text-primary bg-black/20 rounded p-1","children":"r"}],", making the sequence"]}],"\n",["$","$L13","pre-7",{"className":"my-4","children":"ictf{mark0v1 ... n_N1gh7maR3s}","language":"$undefined"}],"\n",["$","p","p-10",{"children":["Slotting an ",["$","code","code-0",{"className":"text-primary bg-black/20 rounded p-1","children":"a"}]," into the final slot completes the flag as"]}],"\n",["$","$L13","pre-8",{"className":"my-4","children":"ictf{mark0v1an_N1gh7maR3s}","language":"$undefined"}]]}]}]
