1:"$Sreact.fragment"
2:I[10453,["/_next/static/chunks/b9afcb09c56609a6.js","/_next/static/chunks/59d5dd52dd9fcb16.js","/_next/static/chunks/0eb309e820c00a6d.js","/_next/static/chunks/239c8c4944a9f036.js","/_next/static/chunks/39b99946d2be6a43.js"],"default"]
20:I[97367,["/_next/static/chunks/ff1a16fafef87110.js","/_next/static/chunks/b71c1cfea9076b4b.js"],"OutletBoundary"]
21:"$Sreact.suspense"
:HL["https://gist.github.com/assets/60120929/bbf7f4fc-96b5-4f13-9b4d-a4f418bf2828","image"]
:HL["https://gist.github.com/assets/60120929/e9d7885e-0836-4e5e-958b-653ec5ae846d","image"]
:HL["https://gist.github.com/assets/60120929/7414e9dd-0823-4118-9d52-f0fd287e7489","image"]
:HL["https://gist.github.com/assets/60120929/e7c4c59c-33cb-406d-af9a-7e42e7b24df8","image"]
3:T8cc,import pwn
import numpy as np

conn = pwn.remote('13.201.224.182', 32545)
SIZE = 36 * 2


def print_buf(grid: np.ndarray):
    for row in grid:
        print(''.join('█' if e else ' ' for e in row))


def goto_top():
    while True:
        conn.sendlineafter(b'> ', b'w')
        if conn.recvline().decode().strip() != 'Moved!':
            conn.sendlineafter(b'> ', b'W')
            if conn.recvline().decode().strip() != 'Jumped over a wall!':
                break


def goto_left():
    while True:
        conn.sendlineafter(b'> ', b'a')
        if conn.recvline().decode().strip() != 'Moved!':
            conn.sendlineafter(b'> ', b'A')
            if conn.recvline().decode().strip() != 'Jumped over a wall!':
                return


def check_floor(x: int, grid: np.ndarray):
    conn.sendlineafter(b'> ', b's')
    if conn.recvline().decode().strip() != 'Moved!':
        grid[1, x] = 1
        grid[1, x + 1] = 1
    else:
        conn.sendlineafter(b'> ', b'w')


def map_line_right():
    grid = np.zeros((2, SIZE), dtype=np.uint8)
    x = 0

    while True:
        check_floor(x, grid)

        conn.sendlineafter(b'> ', b'd')
        if conn.recvline().decode().strip() != 'Moved!':
            conn.sendlineafter(b'> ', b'D')

            if conn.recvline().decode().strip() != 'Jumped over a wall!':
                conn.sendlineafter(b'> ', b's')
                print_buf(grid)
                return
            else:
                grid[0, x + 1] = 1
                grid[1, x + 1] = 1

        x += 2


def map_line_left():
    grid = np.zeros((2, SIZE), dtype=np.uint8)
    x = SIZE

    while True:
        check_floor(x, grid)

        conn.sendlineafter(b'> ', b'a')
        if conn.recvline().decode().strip() != 'Moved!':
            conn.sendlineafter(b'> ', b'A')

            if conn.recvline().decode().strip() != 'Jumped over a wall!':
                conn.sendlineafter(b'> ', b's')
                print_buf(grid)
                return
            else:
                grid[0, x - 1] = 1
                grid[1, x - 1] = 1

        x -= 2


goto_top()
goto_left()

# Skip top padding
for i in range(3):
    conn.sendlineafter(b'> ', b's')

for i in range(0, SIZE, 2):
    map_line_right()
    map_line_left()0:{"buildId":"QiRS6Sx9Ttvp1BSl4xu2I","rsc":["$","$1","c",{"children":[["$","div",null,{"children":["$","main",null,{"className":"text-pretty max-w-5xl mx-auto text-sm [&_h1]:text-5xl [&_h1]:font-semibold [&_h1]:mb-8 [&_blockquote]:text-secondary [&_blockquote]:space-y-3 [&_blockquote]:border-l-4 [&_blockquote]:border-secondary [&_blockquote]:pl-5 [&_blockquote]:mb-5 [&>_p]:my-4 [&_img]:my-5 [&_ul]:list-disc [&_ul]:pl-6 [&_ol]:list-decimal [&_ol]:pl-6 [&_img]:rounded [&_li]:my-2","children":[["$","h1","h1-0",{"children":"bi0sCTF 2024 — A Block and a Hard Place"}],"\n",["$","blockquote","blockquote-0",{"children":["\n",["$","p","p-0",{"children":"Are you the Far Lands because you're a Maze? Or are you a Maze because you're the Far Lands?"}],"\n"]}],"\n",["$","p","p-0",{"children":"We're given a terminal prompt that looks like this:"}],"\n",["$","p","p-1",{"children":["$","img","img-0",{"src":"https://gist.github.com/assets/60120929/bbf7f4fc-96b5-4f13-9b4d-a4f418bf2828","alt":"image"}]}],"\n",["$","p","p-2",{"children":"It looks like we're blindly navigating some sort of \"maze\", with walls blocking regular movement between certain cells."}],"\n",["$","p","p-3",{"children":"As a first order of business, we should probably map out what this maze looks like. We can represent each maze position as a 2x2 grid, where the right and bottom two cells represent whether there is a wall to the right or bottom of the cell, respectively:"}],"\n",["$","$L2","pre-0",{"className":"my-2","children":"..    .X    ..    .X\n..    .X    XX    XX"}],"\n",["$","p","p-4",{"children":"(we don't need to check for left or top walls as we'll have already found them when iterating over other positions.)"}],"\n",["$","p","p-5",{"children":["Then, writing a python script to map out the maze's walls, printing one row of the maze at a time,",["$","sup","sup-0",{"children":["$","a","a-0",{"href":"#user-content-fn-1","id":"user-content-fnref-1","data-footnote-ref":"","aria-describedby":"footnote-label","children":"1"}]}]]}],"\n",["$","$L2","pre-1",{"className":"my-2","children":"$3","language":"py"}],"\n","$L4","\n","$L5","\n","$L6","\n","$L7","\n","$L8","\n","$L9","\n","$La","\n","$Lb","\n","$Lc","\n","$Ld","\n","$Le","\n","$Lf","\n","$L10","\n","$L11","\n","$L12","\n","$L13","\n","$L14","\n","$L15","\n","$L16"]}]}],["$L17","$L18","$L19","$L1a"],"$L1b"]}],"loading":null,"isPartial":false}
4:["$","p","p-6",{"children":"we get"}]
1c:T1b71,
        ██████████████  ████  ██    ████  ████████  ██████████████
       █             █ █   █ █ █   █   █ █       █ █             █
       █  ██████████ █ █  ██ █ █████   █ █  ██████ █  ██████████ █
       █ █         █ █ █ █   █         █ █ █       █ █         █ █
       █ █  ██████ █ █ █ █  ██  ██████████ █       █ █  ██████ █ █
       █ █ █     █ █ █ █ █ █   █       █   █       █ █ █     █ █ █
       █ █ █     █ █ █ █ ███████      ██   ███  ██ █ █ █     █ █ █
       █ █ █     █ █ █ █   █         █       █ █ █ █ █ █     █ █ █
       █ █ █     █ █ █ █   █████  ██ ███  ████ ███ █ █ █     █ █ █
       █ █ █     █ █ █ █       █ █ █   █ █         █ █ █     █ █ █
       █ █ ███████ █ █ █████   ███ █   ███         █ █ ███████ █ █
       █ █         █ █     █       █               █ █         █ █
       █ ███████████ █  ██ █  ██  ████  ██  ██  ██ █ ███████████ █
       █             █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █             █
       ███████████████ █ ███ █████████ █ █ █ █████ ███████████████
                       █       █ █ █   █ █ █   █
          ██  ██  ████ █      ██ █ █  ██ █ █  ████████  ██████████
         █ █ █ █ █   █ █     █   █ █ █   █ █ █ █     █ █         █
        ██ ███ █ █████ █     █████ █ █  ██ █ ███     ███  ██    ██
       █       █       █           █ █ █   █             █ █   █
       █████  ████████ █  ████  ██ █ █ ███ ███████  ██  ██████ █
           █ █ █     █ █ █   █ █ █ █ █   █       █ █ █ █ █ █ █ █
          ██ █████████ ███  ██ █████ █████  ████████ ███ █████ ███
         █     █           █     █         █     █         █     █
         █  ██████  ██████ █  ██████  ████ █  ██████  ████ █  ████
         █ █   █ █ █     █ █ █   █ █ █   █ █ █   █ █ █   █ █ █
         ███   █ █████  ██ ███   █ ███  ██ ███   █ ███  ██ ███
               █   █ █ █         █     █         █     █
            ██ █   ███████    ██ █    ████    ██ █    ████    ██
           █ █ █     █ █ █   █ █ █   █ █ █   █ █ █   █ █ █   █ █
        ██ ███ █    ████ ███ ███ █   █████  ██ █ ███ █████  ██████
       █ █     █   █ █     █     █     █   █   █   █   █   █ █ █ █
       █ █  ██████ ███████ █  ██ ███   █████   ███ █   ███ █ █████
       █ █ █   █ █   █   █ █ █ █   █             █ █     █ █   █
       ███████████████  ██ █████████  ██████  ██ █ ███████ █  ████
         █ █   █ █     █     █ █     █     █ █ █ █         █ █ █ █
         ███   █ █  ██ ███  ██████  ████   █ ███ █         █ █ ███
               █ █ █ █   █ █ █ █ █ █ █ █   █     █         █ █
            ██████ ███  ██ █ █ █ ███ ███  ████  ██    ██   ███  ██
           █   █       █   █ █ █         █ █ █ █     █ █       █ █
        ██████████████ ███ ███ █  ██  ████ ███ ███████ █████  ████
       █   █   █     █   █     █ █ █ █                     █ █ █
       █████   ███████  ██  ████ █ █ █  ██  ██    ██████   ███ █
                       █   █     █ █ █ █ █ █ █   █     █       █
        ██████████████ █████████ █████ █ █ █████ █  ██ █  ██   ███
       █             █     █   █   █   █ █   █ █ █ █ █ █ █ █     █
       █  ██████████ █  ██████ █  ████████  ██ █ █ ███ █ ███    ██
       █ █         █ █ █   █ █ █ █ █   █   █   █ █     █       █
       █ █  ██████ █ █ ███ █ █ █ █ █  ████ █   █ ███████      ████
       █ █ █     █ █ █   █ █ █ █ █ █ █ █ █ █   █             █ █ █
       █ █ █     █ █ █  ██████ █ █████ ███ █  ████  ██    ██ █████
       █ █ █     █ █ █ █ █ █   █   █       █ █ █ █ █ █   █ █   █
       █ █ █     █ █ █ ███ █  ████ █  ██  ██ ███████████ ███  ████
       █ █ █     █ █ █     █ █ █ █ █ █ █ █     █ █ █ █ █     █ █ █
       █ █ ███████ █ █  ██ █████ █ █ █ █ ███  ██ █████ █     █████
       █ █         █ █ █ █   █   █ █ █ █   █ █     █   █       █
       █ ███████████ █ █████ █████████ █   █ █  ██ █   ███  ████
       █             █   █ █     █ █   █   █ █ █ █ █     █ █
       ███████████████   ███     ███   █████ ███ ███     ███5:["$","$L2","pre-2",{"className":"my-2","children":"$1c"}]
6:["$","p","p-7",{"children":"Looks a bit like a QR code, doesn't it? 🤔"}]
7:["$","p","p-8",{"children":"First, though, we need to fix up all of the top-left corners which got messed up by the traversal algorithm. Doing so yields"}]
1d:T1c4d,
       ███████████████ █████ ███   █████ █████████ ███████████████
       █             █ █   █ █ █   █   █ █       █ █             █
       █ ███████████ █ █ ███ █ █████   █ █ ███████ █ ███████████ █
       █ █         █ █ █ █   █         █ █ █       █ █         █ █
       █ █ ███████ █ █ █ █ ███ ███████████ █       █ █ ███████ █ █
       █ █ █     █ █ █ █ █ █   █       █   █       █ █ █     █ █ █
       █ █ █     █ █ █ █ ███████     ███   ███ ███ █ █ █     █ █ █
       █ █ █     █ █ █ █   █         █       █ █ █ █ █ █     █ █ █
       █ █ █     █ █ █ █   █████ ███ ███ █████ ███ █ █ █     █ █ █
       █ █ █     █ █ █ █       █ █ █   █ █         █ █ █     █ █ █
       █ █ ███████ █ █ █████   ███ █   ███         █ █ ███████ █ █
       █ █         █ █     █       █               █ █         █ █
       █ ███████████ █ ███ █ ███ █████ ███ ███ ███ █ ███████████ █
       █             █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █             █
       ███████████████ █ ███ █████████ █ █ █ █████ ███████████████
                       █       █ █ █   █ █ █   █
         ███ ███ █████ █     ███ █ █ ███ █ █ █████████ ███████████
         █ █ █ █ █   █ █     █   █ █ █   █ █ █ █     █ █         █
       ███ ███ █ █████ █     █████ █ █ ███ █ ███     ███ ███   ███
       █       █       █           █ █ █   █             █ █   █
       █████ █████████ █ █████ ███ █ █ ███ ███████ ███ ███████ █
           █ █ █     █ █ █   █ █ █ █ █   █       █ █ █ █ █ █ █ █
         ███ █████████ ███ ███ █████ █████ █████████ ███ █████ ███
         █     █           █     █         █     █         █     █
         █ ███████ ███████ █ ███████ █████ █ ███████ █████ █ █████
         █ █   █ █ █     █ █ █   █ █ █   █ █ █   █ █ █   █ █ █
         ███   █ █████ ███ ███   █ ███ ███ ███   █ ███ ███ ███
               █   █ █ █         █     █         █     █
           ███ █   ███████   ███ █   █████   ███ █   █████   ███
           █ █ █     █ █ █   █ █ █   █ █ █   █ █ █   █ █ █   █ █
       ███ ███ █   █████ ███ ███ █   █████ ███ █ ███ █████ ███████
       █ █     █   █ █     █     █     █   █   █   █   █   █ █ █ █
       █ █ ███████ ███████ █ ███ ███   █████   ███ █   ███ █ █████
       █ █ █   █ █   █   █ █ █ █   █             █ █     █ █   █
       ███████████████ ███ █████████ ███████ ███ █ ███████ █ █████
         █ █   █ █     █     █ █     █     █ █ █ █         █ █ █ █
         ███   █ █ ███ ███ ███████ █████   █ ███ █         █ █ ███
               █ █ █ █   █ █ █ █ █ █ █ █   █     █         █ █
           ███████ ███ ███ █ █ █ ███ ███ █████ ███   ███   ███ ███
           █   █       █   █ █ █         █ █ █ █     █ █       █ █
       ███████████████ ███ ███ █ ███ █████ ███ ███████ █████ █████
       █   █   █     █   █     █ █ █ █                     █ █ █
       █████   ███████ ███ █████ █ █ █ ███ ███   ███████   ███ █
                       █   █     █ █ █ █ █ █ █   █     █       █
       ███████████████ █████████ █████ █ █ █████ █ ███ █ ███   ███
       █             █     █   █   █   █ █   █ █ █ █ █ █ █ █     █
       █ ███████████ █ ███████ █ █████████ ███ █ █ ███ █ ███   ███
       █ █         █ █ █   █ █ █ █ █   █   █   █ █     █       █
       █ █ ███████ █ █ ███ █ █ █ █ █ █████ █   █ ███████     █████
       █ █ █     █ █ █   █ █ █ █ █ █ █ █ █ █   █             █ █ █
       █ █ █     █ █ █ ███████ █ █████ ███ █ █████ ███   ███ █████
       █ █ █     █ █ █ █ █ █   █   █       █ █ █ █ █ █   █ █   █
       █ █ █     █ █ █ ███ █ █████ █ ███ ███ ███████████ ███ █████
       █ █ █     █ █ █     █ █ █ █ █ █ █ █     █ █ █ █ █     █ █ █
       █ █ ███████ █ █ ███ █████ █ █ █ █ ███ ███ █████ █     █████
       █ █         █ █ █ █   █   █ █ █ █   █ █     █   █       █
       █ ███████████ █ █████ █████████ █   █ █ ███ █   ███ █████
       █             █   █ █     █ █   █   █ █ █ █ █     █ █
       ███████████████   ███     ███   █████ ███ ███     ███8:["$","$L2","pre-3",{"className":"my-2","children":"$1d"}]
9:["$","p","p-9",{"children":"Resizing the image in Photoshop to make the corner boxes more square-like, we get an interesting pattern that looks like this:"}]
a:["$","p","p-10",{"align":"center","children":["\n  ",["$","img","img-0",{"src":"https://gist.github.com/assets/60120929/e9d7885e-0836-4e5e-958b-653ec5ae846d","width":"600px"}],"\n"]}]
b:["$","p","p-11",{"children":"The key realization here is that the corners of a valid QR code should consist of a single ring around solid block of black:"}]
c:["$","p","p-12",{"align":"center","children":["\n  ",["$","img","img-0",{"src":"https://gist.github.com/assets/60120929/7414e9dd-0823-4118-9d52-f0fd287e7489","width":"300px"}],"\n"]}]
d:["$","p","p-13",{"children":["Because the walls lie ",["$","em","em-0",{"children":"between"}]," cells, it's clear now that the walls of the maze separate regions of different color in the QR code. Then, this challenge turns into a sort of \"A/B coloring\" problem solvable with the following routine:"]}]
e:["$","ol","ol-0",{"children":["\n",["$","li","li-0",{"children":"Keep a state tracking the current \"color\": white/black (or filled/unfilled)"}],"\n",["$","li","li-1",{"children":"Iterate over all cells, painting each cell the current color."}],"\n",["$","li","li-2",{"children":"When the program hits a wall in the maze while iterating, swap the current color."}],"\n"]}]
f:["$","p","p-14",{"children":"Modifying our traversal script with the given algorithm,"}]
1e:T6a2,import pwn

conn = pwn.remote('13.201.224.182', 32323)
fill = False


def goto_top():
    while True:
        conn.sendlineafter(b'> ', b'w')
        if conn.recvline().decode().strip() != 'Moved!':
            conn.sendlineafter(b'> ', b'W')
            if conn.recvline().decode().strip() != 'Jumped over a wall!':
                break


def goto_left():
    while True:
        conn.sendlineafter(b'> ', b'a')
        if conn.recvline().decode().strip() != 'Moved!':
            conn.sendlineafter(b'> ', b'A')
            if conn.recvline().decode().strip() != 'Jumped over a wall!':
                return


def map_line_right() -> str:
    global fill
    ret = ''

    while True:
        conn.sendlineafter(b'> ', b'd')
        ret += '█' if fill else ' '

        if conn.recvline().decode().strip() != 'Moved!':
            conn.sendlineafter(b'> ', b'D')

            if conn.recvline().decode().strip() != 'Jumped over a wall!':
                conn.sendlineafter(b'> ', b's')
                return ret
            else:
                fill = not fill


def map_line_left() -> str:
    global fill
    ret = ''

    while True:
        conn.sendlineafter(b'> ', b'a')
        ret += '█' if fill else ' '

        if conn.recvline().decode().strip() != 'Moved!':
            conn.sendlineafter(b'> ', b'A')

            if conn.recvline().decode().strip() != 'Jumped over a wall!':
                conn.sendlineafter(b'> ', b's')
                return ret[::-1]
            else:
                fill = not fill


goto_top()
goto_left()

# Skip top padding
for i in range(4):
    conn.sendlineafter(b'> ', b's')

while True:
    print(map_line_right())
    print(map_line_left())10:["$","$L2","pre-4",{"className":"my-2","children":"$1e","language":"py"}]
11:["$","p","p-15",{"children":"we get"}]
1f:T7a7,    ███████ ██ █  ██ ████ ███████    
    █     █ █  █████ █    █     █    
    █ ███ █ █ ██    ██    █ ███ █    
    █ ███ █ ██     ████ █ █ ███ █    
    █ ███ █ ████ █  █     █ ███ █    
    █     █   ████        █     █    
    ███████ █ █ █ █ █ █ █ ███████    
            ████ █  █ ██             
     █ █ ██ ███  █ ██ █ ███ █████    
    ████    ██████ █  ███████ ██     
      █ ███ █  █ █ ██    █ █ █ █     
     ███      ███     ███     ███    
     █  █ ███ █  █ ██ █  █ ██ █      
        ██ █     ███     ███         
      █ ███ █  █ ██ █  █ ██ █  █     
    █   ██ ███   ███  ██  ██  █ █    
    █ ██ ██  █ █  ███████ ███ ██     
     █  █   ███ ███   █ █     █ █    
        █ █  █ █ █ █  ███     █      
      ██    ██ █     █ █   █    █    
    ██  ███  ███ █ ███████████ █     
            ██   █ █ █ ██   ████     
    ███████   ██  ██ ██ █ █ █ ███    
    █     █ ██ █ █  ██  █   ████     
    █ ███ █  █ █ █ █ █  ███████ █    
    █ ███ █ █ ██  ████ █ █ ██ ██     
    █ ███ █   █ █ █ █   █ █ ███ █    
    █     █ █  ██ █ ██ ███  ████     
    ███████  █   █  ██ █ █   █       12:["$","$L2","pre-5",{"className":"my-2","children":"$1f"}]
13:["$","p","p-16",{"align":"center","children":["\n  ",["$","img","img-0",{"src":"https://gist.github.com/assets/60120929/e7c4c59c-33cb-406d-af9a-7e42e7b24df8","width":"400px"}],"\n"]}]
14:["$","p","p-17",{"children":"which we can scan to get the flag."}]
15:["$","$L2","pre-6",{"className":"my-2","children":"bi0sctf{cZrfONl+bGtGiKWMnnR5Sg==}"}]
16:["$","section","section-0",{"data-footnotes":"","className":"footnotes","children":[["$","h2","h2-0",{"className":"sr-only","id":"footnote-label","children":"Footnotes"}],"\n",["$","ol","ol-0",{"children":["\n",["$","li","li-0",{"id":"user-content-fn-1","children":["\n",["$","p","p-0",{"children":["A bit sloppy, but we're somewhat forced to print the buffer before reading the next line instead of printing it all at the end because traversing the maze takes so long the connection times out (crashing the program) before the entire process is done. ",["$","a","a-0",{"href":"#user-content-fnref-1","data-footnote-backref":"","aria-label":"Back to reference 1","className":"data-footnote-backref","children":"↩"}]]}],"\n"]}],"\n"]}],"\n"]}]
17:["$","script","script-0",{"src":"/_next/static/chunks/59d5dd52dd9fcb16.js","async":true}]
18:["$","script","script-1",{"src":"/_next/static/chunks/0eb309e820c00a6d.js","async":true}]
19:["$","script","script-2",{"src":"/_next/static/chunks/239c8c4944a9f036.js","async":true}]
1a:["$","script","script-3",{"src":"/_next/static/chunks/39b99946d2be6a43.js","async":true}]
1b:["$","$L20",null,{"children":["$","$21",null,{"name":"Next.MetadataOutlet","children":"$@22"}]}]
22:null
