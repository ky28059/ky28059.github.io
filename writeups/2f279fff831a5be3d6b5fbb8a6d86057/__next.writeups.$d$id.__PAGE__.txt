1:"$Sreact.fragment"
2:I[10453,["/_next/static/chunks/b9afcb09c56609a6.js","/_next/static/chunks/59d5dd52dd9fcb16.js","/_next/static/chunks/0eb309e820c00a6d.js","/_next/static/chunks/a6b27ecf1b9e9188.js","/_next/static/chunks/39b99946d2be6a43.js"],"default"]
22:I[97367,["/_next/static/chunks/ff1a16fafef87110.js","/_next/static/chunks/b71c1cfea9076b4b.js"],"OutletBoundary"]
23:"$Sreact.suspense"
:HL["https://gist.github.com/user-attachments/assets/e9359b7e-f3cf-4a25-8eea-c82b9ab65912","image"]
:HL["https://gist.github.com/user-attachments/assets/8a765e88-8838-49ae-bc11-91094fc83f97","image"]
:HL["https://gist.github.com/user-attachments/assets/d2a5ca54-7c35-46d8-abcf-18a8d17792f8","image"]
3:T153b,from flask import Flask, request, render_template
from flask_socketio import SocketIO, emit
from stockfish import Stockfish
import random

import chess
from stockfish import Stockfish

games = {}

toxic_msges = [
    "?",
    "rip bozo",
    "so bad lmfaoo",
    "ez",
    "skill issue",
    "mad cuz bad",
    "hold this L",
    "L + ratio + you fell off",
    "i bet your main category is stego",
    "have you tried alt+f4?",
    "ü§°ü§°ü§°"
]

win_msges = [
    "lmaooooooooo ur so bad",
    "was that it?",
    "zzzzzzzzzzzzzzzzzzzzzz",
    "hopefully the next game wont be so quick",
    "nice try - jk that was horrible",
    "this aint checkers man"
]

TURN_LIMIT = 15
STOCKFISH_DEPTH = 21
FLAG = "corctf{this_is_a_fake_flag}"

class GameWrapper:
    def __init__(self, emit):
        self.emit = emit
        self.board = chess.Board(chess.STARTING_FEN)
        self.moves = []
        self.player_turn = True

    def get_player_state(self):
        legal_moves = [f"{m}" for m in self.board.legal_moves] if self.player_turn and self.board.fullmove_number < TURN_LIMIT else []

        status = "running"
        if self.board.fullmove_number >= TURN_LIMIT:
            status = "turn limit"

        if outcome := self.board.outcome():
            if outcome.winner is None:
                status = "draw"
            else:
                status = "win" if outcome.winner == chess.WHITE else "lose"

        return {
            "pos": self.board.fen(),
            "moves": legal_moves,
            "your_turn": self.player_turn,
            "status": status,
            "turn_counter": f"{self.board.fullmove_number} / {TURN_LIMIT} turns"
        }

    def play_move(self, uci):
        if not self.player_turn:
            return
        if self.board.fullmove_number >= TURN_LIMIT:
            return
        
        self.player_turn = False

        outcome = self.board.outcome()
        if outcome is None:
            try:
                move = chess.Move.from_uci(uci)
                if move:
                    if move not in self.board.legal_moves:
                        self.player_turn = True
                        self.emit('state', self.get_player_state())
                        self.emit("chat", {"name": "System", "msg": "Illegal move"})
                        return
                    self.board.push_uci(uci)
            except:
                self.player_turn = True
                self.emit('state', self.get_player_state())
                self.emit("chat", {"name": "System", "msg": "Invalid move format"})
                return
        elif outcome.winner != chess.WHITE:
            self.emit("chat", {"name": "üê∏", "msg": "you lost, bozo"})
            return

        self.moves.append(uci)

        # stockfish has a habit of crashing
        # The following section is used to try to resolve this
        opponent_move, attempts = None, 0
        while not opponent_move and attempts <= 10:
            try:
                attempts += 1
                engine = Stockfish("./stockfish/stockfish-ubuntu-x86-64-avx2", parameters={"Threads": 4}, depth=STOCKFISH_DEPTH)
                for m in self.moves:
                    if engine.is_move_correct(m):
                        engine.make_moves_from_current_position([m])
                opponent_move = engine.get_best_move_time(3_000)
            except:
                pass

        if opponent_move != None:
            self.moves.append(opponent_move)
            opponent_move = chess.Move.from_uci(opponent_move)
            if self.board.is_capture(opponent_move):
                self.emit("chat", {"name": "üê∏", "msg": random.choice(toxic_msges)})
            self.board.push(opponent_move)
            self.player_turn = True
            self.emit("state", self.get_player_state())

            if (outcome := self.board.outcome()) is not None:
                if outcome.termination == chess.Termination.CHECKMATE:
                    if outcome.winner == chess.BLACK:
                        self.emit("chat", {"name": "üê∏", "msg": "Nice try... but not good enough üê∏"})
                    else:
                        self.emit("chat", {"name": "üê∏", "msg": "how??????"})
                        self.emit("chat", {"name": "System", "msg": FLAG})
                else: # statemate, insufficient material, etc
                    self.emit("chat", {"name": "üê∏", "msg": "That was close... but still not good enough üê∏"})
        else:
            self.emit("chat", {"name": "System", "msg": "An error occurred, please restart"})

app = Flask(__name__, static_url_path='', static_folder='static')
socketio = SocketIO(app, cors_allowed_origins='*')

@app.after_request
def add_header(response):
    response.headers['Cache-Control'] = 'max-age=604800'
    return response

@app.route('/')
def index_route():
    return render_template('index.html')

@socketio.on('connect')
def on_connect(_):
    games[request.sid] = GameWrapper(emit)
    emit('state', games[request.sid].get_player_state())

@socketio.on('disconnect')
def on_disconnect():
    if request.sid in games:
        del games[request.sid]

@socketio.on('move')
def onmsg_move(move):
    try:
        games[request.sid].play_move(move)
    except:
        emit("chat", {"name": "System", "msg": "An error occurred, please restart"})

@socketio.on('state')
def onmsg_state():
    emit('state', games[request.sid].get_player_state())0:{"buildId":"DfvEc75fs5QFxpmscM4-K","rsc":["$","$1","c",{"children":[["$","div",null,{"children":["$","main",null,{"className":"text-pretty max-w-5xl mx-auto text-sm [&_h1]:text-5xl [&_h1]:font-semibold [&_h1]:mb-8 [&_blockquote]:text-secondary [&_blockquote]:space-y-3 [&_blockquote]:border-l-4 [&_blockquote]:border-secondary [&_blockquote]:pl-5 [&_blockquote]:mb-5 [&>_p]:my-4 [&_img]:my-5 [&_ul]:list-disc [&_ul]:pl-6 [&_ol]:list-decimal [&_ol]:pl-6 [&_img]:rounded [&_li]:my-2","children":[["$","h1","h1-0",{"children":"corCTF 2024 ‚Äî msfrogofwar3"}],"\n",["$","blockquote","blockquote-0",{"children":["\n",["$","p","p-0",{"children":["$","img","img-0",{"src":"https://gist.github.com/user-attachments/assets/e9359b7e-f3cf-4a25-8eea-c82b9ab65912","alt":"image"}]}],"\n"]}],"\n",["$","p","p-0",{"children":"We're given a Flask server that looks like this:"}],"\n",["$","$L2","pre-0",{"className":"my-2","children":"$3","language":"py"}],"\n","$L4","\n","$L5","\n","$L6","\n","$L7","\n","$L8","\n","$L9","\n","$La","\n","$Lb","\n","$Lc","\n","$Ld","\n","$Le","\n","$Lf","\n","$L10","\n","$L11","\n","$L12","\n","$L13","\n","$L14","\n","$L15","\n","$L16","\n","$L17","\n","$L18","\n","$L19","\n","$L1a","\n","$L1b"]}]}],["$L1c","$L1d","$L1e","$L1f"],"$L20"]}],"loading":null,"isPartial":false}
4:["$","p","p-1",{"children":"At first glance, it looks like we need to win against Stockfish in 15 moves to get the flag."}]
5:["$","p","p-2",{"children":["Obviously, winning against max-difficulty Stockfish, much less in 15 moves, is impossible. Curiously, however, the server uses ",["$","a","a-0",{"href":"https://python-chess.readthedocs.io/en/latest/","children":"python-chess"}],"'s ",["$","code","code-0",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"Move"}]," class to verify game inputs. Reading the ",["$","a","a-1",{"href":"https://github.com/niklasf/python-chess/blob/32253d6cfdbc1939f78f03892fa848412cf4b4fa/chess/__init__.py#L686","children":["source for ",["$","code","code-0",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"Move.from_uci"}]]}],","]}]
21:T4b6,    @classmethod
    def from_uci(cls, uci: str) -> Move:
        """
        Parses a UCI string.

        :raises: :exc:`InvalidMoveError` if the UCI string is invalid.
        """
        if uci == "0000":
            return cls.null()
        elif len(uci) == 4 and "@" == uci[1]:
            try:
                drop = PIECE_SYMBOLS.index(uci[0].lower())
                square = SQUARE_NAMES.index(uci[2:])
            except ValueError:
                raise InvalidMoveError(f"invalid uci: {uci!r}")
            return cls(square, square, drop=drop)
        elif 4 <= len(uci) <= 5:
            try:
                from_square = SQUARE_NAMES.index(uci[0:2])
                to_square = SQUARE_NAMES.index(uci[2:4])
                promotion = PIECE_SYMBOLS.index(uci[4]) if len(uci) == 5 else None
            except ValueError:
                raise InvalidMoveError(f"invalid uci: {uci!r}")
            if from_square == to_square:
                raise InvalidMoveError(f"invalid uci (use 0000 for null moves): {uci!r}")
            return cls(from_square, to_square, promotion=promotion)
        else:
            raise InvalidMoveError(f"expected uci string to be of length 4 or 5: {uci!r}")6:["$","$L2","pre-1",{"className":"my-2","children":"$21","language":"py"}]
7:["$","p","p-3",{"children":["we can send a \"null move\" ",["$","code","code-0",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"0000"}]," to pass the turn to Stockfish. Afterwards, Stockfish will play white and we will play black; all we need to do is get checkmated to \"win\"!"]}]
8:["$","p","p-4",{"children":["$","img","img-0",{"src":"https://gist.github.com/user-attachments/assets/8a765e88-8838-49ae-bc11-91094fc83f97","alt":"image"}]}]
9:["$","$L2","pre-2",{"className":"my-2","children":"socket.emit('move', '0000')\nsocket.emit('move', 'f7f6')\nsocket.emit('move', 'g7g5')","language":"js"}]
a:["$","p","p-5",{"children":["Unfortunately, winning is only part one of the challenge; the flag printed to the chat is fake, and looking in ",["$","code","code-0",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"run-docker.sh"}],", the real flag lies in the ",["$","code","code-1",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"FLAG"}]," environment variable passed to ",["$","code","code-2",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"docker run"}],":"]}]
b:["$","$L2","pre-3",{"className":"my-2","children":"#!/bin/sh\ndocker build . -t msfrogofwar3\ndocker run --rm -it -p 8080:8080 -e FLAG=corctf{real_flag} --name msfrogofwar3 msfrogofwar3","language":"sh"}]
c:["$","p","p-6",{"children":["However, looking again at the ",["$","code","code-0",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"play_move"}]," method in the game server,"]}]
d:["$","$L2","pre-4",{"className":"my-2","children":"        outcome = self.board.outcome()\n        if outcome is None:\n            try:\n                move = chess.Move.from_uci(uci)\n                if move:\n                    if move not in self.board.legal_moves:\n                        self.player_turn = True\n                        self.emit('state', self.get_player_state())\n                        self.emit(\"chat\", {\"name\": \"System\", \"msg\": \"Illegal move\"})\n                        return\n                    self.board.push_uci(uci)\n            except:\n                self.player_turn = True\n                self.emit('state', self.get_player_state())\n                self.emit(\"chat\", {\"name\": \"System\", \"msg\": \"Invalid move format\"})\n                return\n        elif outcome.winner != chess.WHITE:\n            self.emit(\"chat\", {\"name\": \"üê∏\", \"msg\": \"you lost, bozo\"})\n            return\n\n        self.moves.append(uci)","language":"py"}]
e:["$","p","p-7",{"children":["it seems like winning lets us push unchecked moves to ",["$","code","code-0",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"self.moves"}],", which then get passed to ",["$","code","code-1",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"engine.is_move_correct"}],":"]}]
f:["$","$L2","pre-5",{"className":"my-2","children":"        while not opponent_move and attempts <= 10:\n            try:\n                attempts += 1\n                engine = Stockfish(\"./stockfish/stockfish-ubuntu-x86-64-avx2\", parameters={\"Threads\": 4}, depth=STOCKFISH_DEPTH)\n                for m in self.moves:\n                    if engine.is_move_correct(m):\n                        engine.make_moves_from_current_position([m])\n                opponent_move = engine.get_best_move_time(3_000)","language":"py"}]
10:["$","p","p-8",{"children":["The server uses the ",["$","a","a-0",{"href":"https://pypi.org/project/stockfish/","children":"stockfish"}]," python library, which ",["$","a","a-1",{"href":"https://github.com/zhelyabuzhsky/stockfish/blob/master/stockfish/models.py#L47-L53","children":"uses a subprocess to launch and communicate with the Stockfish engine"}],"."]}]
11:["$","$L2","pre-6",{"className":"my-2","children":"        self._stockfish = subprocess.Popen(\n            self._path,\n            universal_newlines=True,\n            stdin=subprocess.PIPE,\n            stdout=subprocess.PIPE,\n            stderr=subprocess.STDOUT,\n        )","language":"py"}]
12:["$","p","p-9",{"children":["Reading the stockfish library ",["$","a","a-0",{"href":"https://github.com/zhelyabuzhsky/stockfish/blob/master/stockfish/models.py#L420","children":["source code for ",["$","code","code-0",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"is_move_correct"}]]}],","]}]
13:["$","$L2","pre-7",{"className":"my-2","children":"    def is_move_correct(self, move_value: str) -> bool:\n        \"\"\"Checks new move.\n\n        Args:\n            move_value:\n              New move value in algebraic notation.\n\n        Returns:\n            True, if new move is correct, else False.\n        \"\"\"\n        old_self_info = self.info\n        self._put(f\"go depth 1 searchmoves {move_value}\")\n        is_move_correct = self._get_best_move_from_sf_popen_process() is not None\n        self.info = old_self_info\n        return is_move_correct","language":"py"}]
14:["$","$L2","pre-8",{"className":"my-2","children":"    def _put(self, command: str) -> None:\n        if not self._stockfish.stdin:\n            raise BrokenPipeError()\n        if self._stockfish.poll() is None and not self._has_quit_command_been_sent:\n            self._stockfish.stdin.write(f\"{command}\\n\")\n            self._stockfish.stdin.flush()\n            if command == \"quit\":\n                self._has_quit_command_been_sent = True","language":"py"}]
15:["$","p","p-10",{"children":["we can see that the argument to ",["$","code","code-0",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"is_move_correct"}]," is simply appended to a command and piped to the Stockfish process. By circumventing the ",["$","code","code-1",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"python-chess"}]," move checking, then, we can control ",["$","code","code-2",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"move_value"}]," and (by inserting a newline into our \"move\") send arbitrary commands to the Stockfish process."]}]
16:["$","p","p-11",{"children":["Stockfish documents its supported UCI commands and functionality ",["$","a","a-0",{"href":"https://official-stockfish.github.io/docs/stockfish-wiki/UCI-&-Commands.html","children":"here"}],". Of particular note is"]}]
17:["$","$L2","pre-9",{"className":"my-2","children":"setoption name Debug Log File value [file path]"}]
18:["$","p","p-12",{"children":"which causes Stockfish to log all incoming and outbound interactions to the specified file path. We can get a simple proof-of-concept attack by making Stockfish log to the configured Flask static dir:"}]
19:["$","p","p-13",{"children":["$","img","img-0",{"src":"https://gist.github.com/user-attachments/assets/d2a5ca54-7c35-46d8-abcf-18a8d17792f8","alt":"image"}]}]
1a:["$","p","p-14",{"children":["As ",["$","a","a-0",{"href":"https://blog.neilhommes.xyz/docs/Writeups/2024/corctf.html","children":"Neil's follow-up writeup explains in more detail"}],", we can use this arbitrary file write to overwrite the contents of ",["$","code","code-0",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"/app/templates/index.html"}]," (making sure to do this before Flask caches the template on initial page load). Then, we just need to execute a Flask SSTI attack to get the flag."]}]
1b:["$","$L2","pre-10",{"className":"my-2","children":"corctf{‚ÄúWhatever you do, don‚Äôt reveal all your techniques in a CTF challenge, you fool, you moron.‚Äù - Sun Tzu, The Art of War}"}]
1c:["$","script","script-0",{"src":"/_next/static/chunks/59d5dd52dd9fcb16.js","async":true}]
1d:["$","script","script-1",{"src":"/_next/static/chunks/0eb309e820c00a6d.js","async":true}]
1e:["$","script","script-2",{"src":"/_next/static/chunks/a6b27ecf1b9e9188.js","async":true}]
1f:["$","script","script-3",{"src":"/_next/static/chunks/39b99946d2be6a43.js","async":true}]
20:["$","$L22",null,{"children":["$","$23",null,{"name":"Next.MetadataOutlet","children":"$@24"}]}]
24:null
