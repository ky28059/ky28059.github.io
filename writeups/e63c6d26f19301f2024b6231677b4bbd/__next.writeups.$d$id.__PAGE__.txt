1:"$Sreact.fragment"
2:I[10453,["/_next/static/chunks/b9afcb09c56609a6.js","/_next/static/chunks/59d5dd52dd9fcb16.js","/_next/static/chunks/0eb309e820c00a6d.js","/_next/static/chunks/a6b27ecf1b9e9188.js","/_next/static/chunks/39b99946d2be6a43.js"],"default"]
1c:I[97367,["/_next/static/chunks/ff1a16fafef87110.js","/_next/static/chunks/b71c1cfea9076b4b.js"],"OutletBoundary"]
1d:"$Sreact.suspense"
:HL["https://gist.github.com/assets/60120929/8cf8fab8-aaee-4d26-a65e-1eac9beb6834","image"]
3:T8dd,#!/usr/bin/env python3

import io
import random
import string
from collections import Counter, defaultdict

with open('flag.txt', 'r') as f:
    flag = f.read()

def generate_fake_flag():
    return 'ictf{' + ''.join([
        random.choice(string.ascii_lowercase + string.digits + '_-') for _ in range(20)
    ]) + '}'

def derive_markov_model(texts):
    probabilities = defaultdict(Counter)
    for text in texts:
        for a, b in zip(text[:-1], text[1:]):
            probabilities[a][b] += 1

    return probabilities

def predict_next_char(model, prefix):
    if not prefix:
        prefix = 'ictf{'

    last_char = prefix[-1]
    if last_char not in model:
        return random.choice(string.ascii_lowercase + '_')
    else:
        options = model[last_char]
        options_str = ''.join(c * cnt for c, cnt in options.items())
        return random.choice(options_str)

def finish_flag(model, prefix):
    flag = prefix
    while flag[-1] != '}' and len(flag) < 30:
        flag += predict_next_char(model, flag)
    if flag[-1] != '}':
        flag += '}'
    return flag

def main():
    num_datapoints = int(input("How many training samples would you like?\n"))
    percent_real = int(input("What percentage of training flags would you like to be included to make the flags look real? (max 20%)\n"))
    assert 0 <= percent_real <= 20

    num_times_real = int(num_datapoints * (percent_real / 100))
    num_times_fake = num_datapoints - num_times_real

    dataset = [flag] * num_times_real + [generate_fake_flag() for _ in range(num_times_fake)]

    print("Understood, training the model...")
    # import ipdb; ipdb.set_trace()
    model = derive_markov_model(dataset)

    print("Done! Now, how many flags would you like to generate?")
    num_flags = int(input())
    if num_flags > 10000:
        print("Sorry, that's too many flags.")
        return
    print("Here you go:")
    for _ in range(num_flags):
        print(finish_flag(model, 'ictf{'))

    print("Thanks for using our service! Now, if you were by some incredible chance able to find the flag, you have one chance to confirm that it's correct.")
    if input("Flag: ") == flag:
        print("Correct!")
    else:
        print("Incorrect!")

if __name__ == '__main__':
    main()0:{"buildId":"DfvEc75fs5QFxpmscM4-K","rsc":["$","$1","c",{"children":[["$","div",null,{"children":["$","main",null,{"className":"text-pretty max-w-5xl mx-auto text-sm [&_h1]:text-5xl [&_h1]:font-semibold [&_h1]:mb-8 [&_blockquote]:text-secondary [&_blockquote]:space-y-3 [&_blockquote]:border-l-4 [&_blockquote]:border-secondary [&_blockquote]:pl-5 [&_blockquote]:mb-5 [&>_p]:my-4 [&_img]:my-5 [&_ul]:list-disc [&_ul]:pl-6 [&_ol]:list-decimal [&_ol]:pl-6 [&_img]:rounded [&_li]:my-2","children":[["$","h1","h1-0",{"children":"iCTF 2023 â€” escape_from_markov"}],"\n",["$","blockquote","blockquote-0",{"children":["\n",["$","p","p-0",{"children":"We made a fake flag generator just for this CTF! It can generate flags that look like the real one! Can you find the real flag?"}],"\n",["$","p","p-1",{"children":["$","code","code-0",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"nc 0.cloud.chals.io 34879"}]}],"\n"]}],"\n",["$","p","p-0",{"children":"We're given a Python server that looks like this:"}],"\n",["$","$L2","pre-0",{"className":"my-2","children":"$3","language":"py"}],"\n","$L4","\n","$L5","\n","$L6","\n","$L7","\n","$L8","\n","$L9","\n","$La","\n","$Lb","\n","$Lc","\n","$Ld","\n","$Le","\n","$Lf","\n","$L10","\n","$L11","\n","$L12","\n","$L13","\n","$L14","\n","$L15","\n","$L16"]}]}],["$L17","$L18","$L19","$L1a"],"$L1b"]}],"loading":null,"isPartial":false}
4:["$","p","p-1",{"children":["Based on the challenge title and the provided source code, it looks like the flag is loaded into a ",["$","a","a-0",{"href":"https://en.wikipedia.org/wiki/Markov_chain","children":"Markov chain"}],"\nthat we get to query generated flags from."]}]
5:["$","p","p-2",{"children":"We can connect to the server and sample 10,000 flags from the Markov chain output, then analyze weights for each character in the chain:"}]
6:["$","$L2","pre-1",{"className":"my-2","children":"import collections\n\nmarkov = {}\n\nwith open(\"out.txt\") as f:\n    lines = [x.strip()[5:] for x in f.readlines()]\n\nprint(lines)\nfor line in lines:\n    for i in range(len(line) - 1):\n        if not (line[i] in markov):\n            markov[line[i]] = collections.Counter()\n        markov[line[i]][line[i + 1]] += 1\n\nfor x, v in markov.items():\n    print(f\"{x}: , {v.most_common(5)}\")","language":"py"}]
7:["$","p","p-3",{"children":["(assuming generated flags are saved in ",["$","code","code-0",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"out.txt"}],")"]}]
8:["$","img","img-0",{"src":"https://gist.github.com/assets/60120929/8cf8fab8-aaee-4d26-a65e-1eac9beb6834","width":"450px"}]
9:["$","p","p-4",{"children":["Starting from ",["$","code","code-0",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"i"}]," (because of ",["$","code","code-1",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"ictf"}],") and following the most probable next letter, we get"]}]
a:["$","$L2","pre-2",{"className":"my-2","children":"ictf{ma"}]
b:["$","p","p-5",{"children":["Once we reach ",["$","code","code-0",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"a"}],", however, there seem to be 3 options with roughly similar probability. Before resolving this, we can work\nbackwards from ",["$","code","code-1",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"}"}]," to get"]}]
c:["$","$L2","pre-3",{"className":"my-2","children":"ictf{ma ... aR3s}"}]
d:["$","p","p-6",{"children":["Starting from ",["$","code","code-0",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"n"}],", the sequence is"]}]
e:["$","$L2","pre-4",{"className":"my-2","children":"n_N1"}]
f:["$","p","p-7",{"children":["with ",["$","code","code-0",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"g"}]," or ",["$","code","code-1",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"a"}]," potentially following. Starting from ",["$","code","code-2",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"g"}],", the sequence is"]}]
10:["$","$L2","pre-5",{"className":"my-2","children":"gh7ma"}]
11:["$","p","p-8",{"children":"So putting the 3 sequences together to resemble a roughly english word, we can infer the end of the flag looks like"}]
12:["$","$L2","pre-6",{"className":"my-2","children":"ictf{ma ... n_N1gh7maR3s}"}]
13:["$","p","p-9",{"children":["Then, because ",["$","code","code-0",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"R"}]," cannot follow ",["$","code","code-1",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"ma"}]," (as that would make the flag ",["$","code","code-2",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"ictf{maR3s}"}],", ending it early and rendering it nonsensical)\nand because ",["$","code","code-3",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"n"}]," likely does not immediately follow ",["$","code","code-4",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"ma"}]," (as that would make the flag ",["$","code","code-5",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"ictf{man_N1gh7maR3s}"}],", which is a bit suspicious),\nthe next character must then be ",["$","code","code-6",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"r"}],", making the sequence"]}]
14:["$","$L2","pre-7",{"className":"my-2","children":"ictf{mark0v1 ... n_N1gh7maR3s}"}]
15:["$","p","p-10",{"children":["Slotting an ",["$","code","code-0",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"a"}]," into the final slot completes the flag as"]}]
16:["$","$L2","pre-8",{"className":"my-2","children":"ictf{mark0v1an_N1gh7maR3s}"}]
17:["$","script","script-0",{"src":"/_next/static/chunks/59d5dd52dd9fcb16.js","async":true}]
18:["$","script","script-1",{"src":"/_next/static/chunks/0eb309e820c00a6d.js","async":true}]
19:["$","script","script-2",{"src":"/_next/static/chunks/a6b27ecf1b9e9188.js","async":true}]
1a:["$","script","script-3",{"src":"/_next/static/chunks/39b99946d2be6a43.js","async":true}]
1b:["$","$L1c",null,{"children":["$","$1d",null,{"name":"Next.MetadataOutlet","children":"$@1e"}]}]
1e:null
