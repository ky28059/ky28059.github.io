1:"$Sreact.fragment"
2:I[10453,["/_next/static/chunks/b9afcb09c56609a6.js","/_next/static/chunks/59d5dd52dd9fcb16.js","/_next/static/chunks/0eb309e820c00a6d.js","/_next/static/chunks/a6b27ecf1b9e9188.js","/_next/static/chunks/39b99946d2be6a43.js"],"default"]
f:I[97367,["/_next/static/chunks/ff1a16fafef87110.js","/_next/static/chunks/b71c1cfea9076b4b.js"],"OutletBoundary"]
10:"$Sreact.suspense"
:HL["https://gist.github.com/user-attachments/assets/bf06c677-2a64-4164-bd7a-9ea8417151f4","image"]
:HL["https://gist.github.com/user-attachments/assets/7f747d6c-d825-4172-ac21-56e590c6102e","image"]
:HL["https://gist.github.com/user-attachments/assets/dd8f2b1c-70a4-4c52-b899-6f293db1a908","image"]
:HL["https://gist.github.com/user-attachments/assets/c2bc1f12-ce89-4805-bd88-a3902e539636","image"]
3:T47e,import numpy as np
import cv2
import random
from datetime import datetime

img = cv2.imread('flag.png')
size_x, size_y = img.shape[:2]

enc_negpos = np.zeros_like(img)

random.seed(datetime.now().timestamp())

for i in range(size_x):
    for j in range(size_y):
        for rgb in range(3):
            negpos = random.random()
            if negpos < 0.5:
                enc_negpos[i, j, rgb] = img[i, j, rgb]
            else:
                enc_negpos[i, j, rgb] = img[i, j, rgb] ^ 255


enc_shuffle = enc_negpos.copy()

for i in range(size_x):
    for j in range(size_y):
        shuffle = random.randint(1, 6)
        if shuffle == 1:
            enc_shuffle[i, j] = enc_negpos[i, j]
        elif shuffle == 2:
            enc_shuffle[i, j] = enc_negpos[i, j][[0, 2, 1]]
        elif shuffle == 3:
            enc_shuffle[i, j] = enc_negpos[i, j][[1, 0, 2]]
        elif shuffle == 4:
            enc_shuffle[i, j] = enc_negpos[i, j][[1, 2, 0]]
        elif shuffle == 5:
            enc_shuffle[i, j] = enc_negpos[i, j][[2, 0, 1]]
        else:
            enc_shuffle[i, j] = enc_negpos[i, j][[2, 1, 0]]


cv2.imwrite('enc.png', enc_shuffle)0:{"buildId":"DfvEc75fs5QFxpmscM4-K","rsc":["$","$1","c",{"children":[["$","div",null,{"children":["$","main",null,{"className":"text-pretty max-w-5xl mx-auto text-sm [&_h1]:text-5xl [&_h1]:font-semibold [&_h1]:mb-8 [&_blockquote]:text-secondary [&_blockquote]:space-y-3 [&_blockquote]:border-l-4 [&_blockquote]:border-secondary [&_blockquote]:pl-5 [&_blockquote]:mb-5 [&>_p]:my-4 [&_img]:my-5 [&_ul]:list-disc [&_ul]:pl-6 [&_ol]:list-decimal [&_ol]:pl-6 [&_img]:rounded [&_li]:my-2","children":[["$","h1","h1-0",{"children":"CyberSpace CTF 2024 â€” SKK?"}],"\n",["$","blockquote","blockquote-0",{"children":["\n",["$","p","p-0",{"children":"What have you done to my flag?"}],"\n"]}],"\n",["$","p","p-0",{"children":"We're given an encoded image of the flag"}],"\n",["$","p","p-1",{"children":["$","img","img-0",{"src":"https://gist.github.com/user-attachments/assets/bf06c677-2a64-4164-bd7a-9ea8417151f4","alt":"enc"}]}],"\n",["$","p","p-2",{"children":"and an encoder script that looks like this:"}],"\n",["$","$L2","pre-0",{"className":"my-2","children":"$3","language":"py"}],"\n",["$","p","p-3",{"children":"At first glance, it looks like the image encoding is done in two steps:"}],"\n",["$","ol","ol-0",{"children":["\n",["$","li","li-0",{"children":"Randomly XOR random channels of each pixel in the image with 255."}],"\n",["$","li","li-1",{"children":"Randomly swap channels for each pixel."}],"\n"]}],"\n",["$","p","p-4",{"children":["With no further information, there doesn't seem to be a mathematical way to perfectly reverse this encoding. However, we can conjecture that most pixels in the original image are white (e.g. ",["$","code","code-0",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"(255, 255, 255)"}],"). Running these pixels through the series of XORs and swaps should create permutations of channels that are either ",["$","code","code-1",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"0"}]," or ",["$","code","code-2",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"255"}],", and indeed we see the majority of border pixels follow this pattern:"]}],"\n",["$","p","p-5",{"children":["$","img","img-0",{"src":"https://gist.github.com/user-attachments/assets/7f747d6c-d825-4172-ac21-56e590c6102e","alt":"image"}]}],"\n",["$","p","p-6",{"children":"Then, we should filter out all of these background pixels and examine only the gray band in the middle. Here's a Python script that does just that:"}],"\n","$L4","\n","$L5","\n","$L6","\n","$L7","\n","$L8","\n","$L9"]}]}],["$La","$Lb","$Lc","$Ld"],"$Le"]}],"loading":null,"isPartial":false}
4:["$","$L2","pre-1",{"className":"my-2","children":"import cv2\nimport numpy as np\n\nimg = cv2.imread('./enc.png')\n\nres = np.zeros_like(img)\n\nfor i in range(len(img)):\n    for j in range(len(img[i])):\n        if all(30 < x < 225 for x in img[i, j]):\n            res[i, j] = img[i, j] - 128\n        else:\n            res[i, j] = [255, 255, 255]\n\ncv2.namedWindow('res', cv2.WINDOW_NORMAL)\ncv2.imshow('res', res)\ncv2.waitKey()\n\ncv2.imshow('res', cv2.cvtColor(res, cv2.COLOR_BGR2GRAY))\ncv2.waitKey()","language":"py"}]
5:["$","p","p-7",{"children":["$","img","img-0",{"src":"https://gist.github.com/user-attachments/assets/dd8f2b1c-70a4-4c52-b899-6f293db1a908","alt":"res"}]}]
6:["$","$L2","pre-2",{"className":"my-2","children":"CSCTF{why_SKK_image_encryption_sooo.weak?}"}]
7:["$","p","p-8",{"children":["(or a simpler solution using ",["$","code","code-0",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"inRange"}],":"]}]
8:["$","$L2","pre-3",{"className":"my-2","children":"import cv2\n\nimg = cv2.imread('./enc.png')\nmask = cv2.inRange(img, (20, 20, 20), (235, 235, 235))\n\ncv2.namedWindow('res', cv2.WINDOW_NORMAL)\ncv2.imshow('res', mask)\ncv2.waitKey()","language":"py"}]
9:["$","p","p-9",{"children":["$","img","img-0",{"src":"https://gist.github.com/user-attachments/assets/c2bc1f12-ce89-4805-bd88-a3902e539636","alt":"res2"}]}]
a:["$","script","script-0",{"src":"/_next/static/chunks/59d5dd52dd9fcb16.js","async":true}]
b:["$","script","script-1",{"src":"/_next/static/chunks/0eb309e820c00a6d.js","async":true}]
c:["$","script","script-2",{"src":"/_next/static/chunks/a6b27ecf1b9e9188.js","async":true}]
d:["$","script","script-3",{"src":"/_next/static/chunks/39b99946d2be6a43.js","async":true}]
e:["$","$Lf",null,{"children":["$","$10",null,{"name":"Next.MetadataOutlet","children":"$@11"}]}]
11:null
