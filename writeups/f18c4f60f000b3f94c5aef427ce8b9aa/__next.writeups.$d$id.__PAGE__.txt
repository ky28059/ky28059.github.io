1:"$Sreact.fragment"
2:I[10453,["/_next/static/chunks/b9afcb09c56609a6.js","/_next/static/chunks/59d5dd52dd9fcb16.js","/_next/static/chunks/0eb309e820c00a6d.js","/_next/static/chunks/a6b27ecf1b9e9188.js","/_next/static/chunks/39b99946d2be6a43.js"],"default"]
18:I[97367,["/_next/static/chunks/ff1a16fafef87110.js","/_next/static/chunks/b71c1cfea9076b4b.js"],"OutletBoundary"]
19:"$Sreact.suspense"
:HL["https://gist.github.com/user-attachments/assets/a08452a5-fcd9-4849-af40-8979f678f55e","image"]
:HL["https://gist.github.com/user-attachments/assets/7ad40530-ab1e-40dd-b709-ce2954da1cb1","image"]
3:T84b,#!/usr/bin/python3

import os,pwd,re
import socketserver, signal
import subprocess

listen = 3333

blacklist = os.popen("ls /bin").read().split("\n")
blacklist.remove("echo")
#print(blacklist)

def filter_check(command):
    user_input = command
    parsed = command.split()
    #Must begin with echo
    if not "echo" in parsed:
        return False
    else:
        if ">" in parsed:
            #print("HEY! No moving things around.")
            req.sendall(b"HEY! No moving things around.\n\n")
            return False
        else:
            parsed = command.replace("$", " ").replace("(", " ").replace(")", " ").replace("|"," ").replace("&", " ").replace(";"," ").replace("<"," ").replace(">"," ").replace("`"," ").split()
            #print(parsed)
            for i in range(len(parsed)):
                if parsed[i] in blacklist:
                    return False
            return True

def backend(req):
    req.sendall(b'This is shell made to use only the echo command.\n')
    while True:
        #print("\nThis is shell made to use only the echo command.")
        req.sendall(b'Please input command: ')
        user_input = req.recv(4096).strip(b'\n').decode()
        print(user_input)
        #Check input
        if user_input:
            if filter_check(user_input):
                output = os.popen(user_input).read()
                req.sendall((output + '\n').encode())
            else:
                #print("Those commands don't work.")
                req.sendall(b"HEY! I said only echo works.\n\n")
        else:
            #print("Why no command?")
            req.sendall(b"Where\'s the command.\n\n")

class incoming(socketserver.BaseRequestHandler):
    def handle(self):
        signal.alarm(1500)
        req = self.request
        backend(req)


class ReusableTCPServer(socketserver.ForkingMixIn, socketserver.TCPServer):
    pass


def main():
    uid = pwd.getpwnam('ctf')[2]
    os.setuid(uid)
    socketserver.TCPServer.allow_reuse_address = True
    server = ReusableTCPServer(("0.0.0.0", listen), incoming)
    server.serve_forever()

if __name__ == '__main__':
    main()0:{"buildId":"DfvEc75fs5QFxpmscM4-K","rsc":["$","$1","c",{"children":[["$","div",null,{"children":["$","main",null,{"className":"text-pretty max-w-5xl mx-auto text-sm [&_h1]:text-5xl [&_h1]:font-semibold [&_h1]:mb-8 [&_blockquote]:text-secondary [&_blockquote]:space-y-3 [&_blockquote]:border-l-4 [&_blockquote]:border-secondary [&_blockquote]:pl-5 [&_blockquote]:mb-5 [&>_p]:my-4 [&_img]:my-5 [&_ul]:list-disc [&_ul]:pl-6 [&_ol]:list-decimal [&_ol]:pl-6 [&_img]:rounded [&_li]:my-2","children":[["$","h1","h1-0",{"children":"PatriotCTF 2024 â€” Really Only Echo"}],"\n",["$","blockquote","blockquote-0",{"children":["\n",["$","p","p-0",{"children":"Hey, I have made a terminal that only uses echo, can you find the flag?"}],"\n",["$","p","p-1",{"children":["$","code","code-0",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"nc chal.competitivecyber.club 3333"}]}],"\n"]}],"\n",["$","p","p-0",{"children":"We're given a Python server that looks like this:"}],"\n",["$","$L2","pre-0",{"className":"my-2","children":"$3","language":"py"}],"\n",["$","p","p-1",{"children":["We're given a shell, but all binaries in ",["$","code","code-0",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"/bin"}]," except ","$L4"," are banned (and indeed, we're forced to have at least one ","$L5"," in our input)."]}],"\n","$L6","\n","$L7","\n","$L8","\n","$L9","\n","$La","\n","$Lb","\n","$Lc","\n","$Ld","\n","$Le","\n","$Lf","\n","$L10","\n","$L11","\n","$L12"]}]}],["$L13","$L14","$L15","$L16"],"$L17"]}],"loading":null,"isPartial":false}
4:["$","code","code-1",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"echo"}]
5:["$","code","code-2",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"echo"}]
6:["$","p","p-2",{"children":["We can run an equivalent of ",["$","code","code-0",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"ls"}]," with ",["$","code","code-1",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"echo *"}]," to see our target, ",["$","code","code-2",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"flag.txt"}]," in the same directory:"]}]
7:["$","p","p-3",{"children":["$","img","img-0",{"src":"https://gist.github.com/user-attachments/assets/a08452a5-fcd9-4849-af40-8979f678f55e","alt":"image"}]}]
8:["$","p","p-4",{"children":["At first glance, we can try using ",["$","a","a-0",{"href":"https://stackoverflow.com/a/22378194","children":["$","code","code-0",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"echo $(<flag.txt)"}]}]," to concatenate and print the flag file with ",["$","code","code-0",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"echo"}],", but unfortunately ",["$","code","code-1",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"$$(<)"}]," is a bash-exclusive construct which won't work on Python's default shell ",["$","code","code-2",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"sh"}],"."]}]
9:["$","p","p-5",{"children":"Still, a clue lies in the way the server checks our input for banned commands:"}]
a:["$","$L2","pre-1",{"className":"my-2","children":"            parsed = command.replace(\"$\", \" \").replace(\"(\", \" \").replace(\")\", \" \").replace(\"|\",\" \").replace(\"&\", \" \").replace(\";\",\" \").replace(\"<\",\" \").replace(\">\",\" \").replace(\"`\",\" \").split()\n            #print(parsed)\n            for i in range(len(parsed)):\n                if parsed[i] in blacklist:\n                    return False","language":"py"}]
b:["$","p","p-6",{"children":["While they seemingly account for trying to escape the plaintext blacklist check using characters like ",["$","code","code-0",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"("}],", ",["$","code","code-1",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"&"}],", and ",["$","code","code-2",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":";"}],", they don't account for ",["$","code","code-3",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"}"}],"."]}]
c:["$","p","p-7",{"children":["Thus, we can run any command by using shell variable expansion and ",["$","a","a-0",{"href":"https://en.wikipedia.org/wiki/Input_Field_Separators","children":["$","code","code-0",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"$$IFS"}]}]," a la"]}]
d:["$","$L2","pre-2",{"className":"my-2","children":"echo *;${IFS}command","language":"bash"}]
e:["$","p","p-8",{"children":["(remembering to have at least one ",["$","code","code-0",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"echo"}]," in the command to satisfy the filter)."]}]
f:["$","p","p-9",{"children":"Finally, we can run"}]
10:["$","$L2","pre-3",{"className":"my-2","children":"echo *;${IFS}cat flag.txt","language":"bash"}]
11:["$","p","p-10",{"children":"to cat the flag."}]
12:["$","p","p-11",{"children":["$","img","img-0",{"src":"https://gist.github.com/user-attachments/assets/7ad40530-ab1e-40dd-b709-ce2954da1cb1","alt":"image"}]}]
13:["$","script","script-0",{"src":"/_next/static/chunks/59d5dd52dd9fcb16.js","async":true}]
14:["$","script","script-1",{"src":"/_next/static/chunks/0eb309e820c00a6d.js","async":true}]
15:["$","script","script-2",{"src":"/_next/static/chunks/a6b27ecf1b9e9188.js","async":true}]
16:["$","script","script-3",{"src":"/_next/static/chunks/39b99946d2be6a43.js","async":true}]
17:["$","$L18",null,{"children":["$","$19",null,{"name":"Next.MetadataOutlet","children":"$@1a"}]}]
1a:null
