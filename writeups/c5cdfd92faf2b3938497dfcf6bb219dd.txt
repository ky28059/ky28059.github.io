1:"$Sreact.fragment"
2:I[87555,[],""]
3:I[31295,[],""]
4:I[6874,["874","static/chunks/874-3e820bd666038662.js","633","static/chunks/app/writeups/%5Bid%5D/layout-2577bd3482649595.js"],""]
6:I[59665,[],"OutletBoundary"]
8:I[74911,[],"AsyncMetadataOutlet"]
a:I[59665,[],"ViewportBoundary"]
c:I[59665,[],"MetadataBoundary"]
d:"$Sreact.suspense"
f:I[28393,[],""]
:HL["/_next/static/media/e4af272ccee01ff0-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/b7a1bece15a86168.css","style"]
0:{"P":null,"b":"d7v-43sNWg7chv2b_u_AQ","p":"","c":["","writeups","c5cdfd92faf2b3938497dfcf6bb219dd"],"i":false,"f":[[["",{"children":["writeups",{"children":[["id","c5cdfd92faf2b3938497dfcf6bb219dd","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/b7a1bece15a86168.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"className":"dark scroll-smooth","children":[["$","head",null,{"children":["$","meta",null,{"charSet":"utf-8"}]}],["$","body",null,{"className":"text-dark dark:text-white dark:bg-midnight","style":{"fontFamily":"'Inter', 'Inter Fallback'","fontStyle":"normal"},"children":["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","div",null,{"className":"h-screen flex items-center justify-center","children":["$","main",null,{"className":"relative pl-14","children":[["$","svg",null,{"stroke":"currentColor","fill":"currentColor","strokeWidth":"0","viewBox":"0 0 512 512","className":"absolute left-0 top-2 text-5xl text-grapefruit","children":["$undefined",[["$","path","0",{"d":"M256 48C140.559 48 48 140.559 48 256c0 115.436 92.559 208 208 208 115.435 0 208-92.564 208-208 0-115.441-92.564-208-208-208zm104.002 282.881l-29.12 29.117L256 285.117l-74.881 74.881-29.121-29.117L226.881 256l-74.883-74.881 29.121-29.116L256 226.881l74.881-74.878 29.12 29.116L285.119 256l74.883 74.881z","children":"$undefined"}]]],"style":{"color":"$undefined"},"height":"1em","width":"1em","xmlns":"http://www.w3.org/2000/svg"}],["$","h1",null,{"className":"font-bold text-7xl underline decoration-grapefruit mb-5","children":"404."}],["$","p",null,{"children":"Your requested page was not found."}],["$","$L4",null,{"href":"/","className":"font-medium text-inherit","children":"Return to home →"}]]}]}],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]]}]]}],{"children":["writeups",["$","$1","c",{"children":[null,["$","main",null,{"className":"container pt-20 pb-24","children":["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]]}],{"children":[["id","c5cdfd92faf2b3938497dfcf6bb219dd","d"],["$","$1","c",{"children":[null,[["$","$L4",null,{"href":"/writeups","className":"text-secondary text-sm mb-10 -ml-5 block w-max","children":"← Back to writeups"}],["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L5",null,["$","$L6",null,{"children":["$L7",["$","$L8",null,{"promise":"$@9"}]]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,[["$","$La",null,{"children":"$Lb"}],["$","meta",null,{"name":"next-size-adjust","content":""}]],["$","$Lc",null,{"children":["$","div",null,{"hidden":true,"children":["$","$d",null,{"fallback":null,"children":"$Le"}]}]}]]}],false]],"m":"$undefined","G":["$f",[]],"s":false,"S":true}
b:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
7:null
10:I[50674,["263","static/chunks/bc9c3264-6371ca03223855d4.js","810","static/chunks/48507feb-8452885980bba250.js","330","static/chunks/08ffe114-f47006c90e36a3eb.js","800","static/chunks/800-bd0deb6e7b7e903a.js","134","static/chunks/app/writeups/%5Bid%5D/page-54fe20cc7a9d3224.js"],"default"]
11:T79e,#!/usr/local/bin/python3.11

import regex  # le duh
import os
import tomllib
from tabulate import tabulate
from importlib import import_module
from itertools import zip_longest as zp


def check_regex(pattern, matches, nonmatches):
    try:
        re = regex.compile(pattern, flags=regex.V1)
    except:
        print("nope")
        return False

    for text in matches:
        if not re.search(text):
            print(f"whoops, didn't match on {text}")
            return False

    for text in nonmatches:
        if re.search(text):
            print(f"whoops, matched on {text}")
            return False

    return True


def main():
    for dir in sorted(os.listdir("challenges")):
        tomlpath = os.sep.join(["challenges", dir, "info.toml"])
        with open(tomlpath, "rb") as f:
            info = tomllib.load(f)

        matches = info["matches"]
        nonmatches = info["nonmatches"]
        length = info["length"]

        print(info["description"])
        print(
            tabulate(
                zp(matches, nonmatches),
                [
                    "Match on all of these:",
                    "But none of these:    ",
                ],
                disable_numparse=True,
                tablefmt="simple",
            )
        )
        print(f"\nMaximum allowable length is {length}\n")

        # include some test cases that may be inconvenient to display
        # only some challenges have extra tests
        # fear not, the intended pattern will remain the same
        ext = import_module(f"challenges.{dir}.extensions")
        matches.extend(ext.more_matches())
        nonmatches.extend(ext.more_nonmatches())

        pattern = input("> ")
        if len(pattern) > length:
            print(f"whoops, too long")
            return

        if not check_regex(pattern, matches, nonmatches):
            return

    print(open("flag.txt").read())


if __name__ == "__main__":
    main()5:["$","div",null,{"children":["$","main",null,{"className":"text-pretty max-w-5xl mx-auto text-sm [&_h1]:text-5xl [&_h1]:font-semibold [&_h1]:mb-8 [&_blockquote]:text-secondary [&_blockquote]:space-y-3 [&_blockquote]:border-l-4 [&_blockquote]:border-secondary [&_blockquote]:pl-5 [&_blockquote]:mb-5 [&>_p]:my-4 [&_img]:my-5 [&_ul]:list-disc [&_ul]:pl-6 [&_ol]:list-decimal [&_ol]:pl-6 [&_img]:rounded [&_li]:my-2","children":[["$","h1","h1-0",{"children":"TJCTF 2024 — golf-hard"}],"\n",["$","blockquote","blockquote-0",{"children":["\n",["$","p","p-0",{"children":"regex below par? note that this challenge has five levels."}],"\n",["$","p","p-1",{"children":["$","code","code-0",{"className":"opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"nc tjc.tf 31627"}]}],"\n"]}],"\n",["$","p","p-0",{"children":"We're given a Regex \"quiz\" with 5 levels. After passing all 5, we get the flag."}],"\n",["$","$L10","pre-0",{"className":"my-2","children":"$11","language":"py"}],"\n",["$","p","p-1",{"children":["Since the server compiles regex using ",["$","code","code-0",{"className":"opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"regex"}]," instead of ",["$","code","code-1",{"className":"opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"re"}],", we can use fancier regular expression extensions like ",["$","a","a-0",{"href":"https://pypi.org/project/regex/#recursive-patterns-hg-issue-27","children":"recursion"}],"."]}],"\n","$L12","\n","$L13","\n","$L14","\n","$L15","\n","$L16","\n","$L17","\n","$L18","\n","$L19","\n","$L1a","\n","$L1b","\n","$L1c","\n","$L1d","\n","$L1e","\n","$L1f","\n","$L20","\n","$L21","\n","$L22","\n","$L23","\n","$L24","\n","$L25","\n","$L26"]}]}]
12:["$","div","h3-0",{"className":"relative","children":[["$","span",null,{"id":"warmup","className":"absolute -top-16"}],["$","a",null,{"className":"group flex gap-2 items-center text-inherit hover:underline decoration-1 underline-offset-4 decoration-secondary decoration-dotted text-3xl font-bold mt-10 mb-4 ","href":"#warmup","children":[["$","h2",null,{"children":"Warmup"}],["$","svg",null,{"stroke":"currentColor","fill":"none","strokeWidth":"2","viewBox":"0 0 24 24","strokeLinecap":"round","strokeLinejoin":"round","className":"hidden group-hover:block text-xl absolute pt-0.5 -left-7 stroke-[1.5px] text-secondary","children":["$undefined",[["$","path","0",{"d":"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71","children":"$undefined"}],["$","path","1",{"d":"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71","children":"$undefined"}]]],"style":{"color":"$undefined"},"height":"1em","width":"1em","xmlns":"http://www.w3.org/2000/svg"}]]}]]}]
13:["$","p","p-2",{"children":["We just want to match all words starting with ",["$","code","code-0",{"className":"opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"a"}],". This is pretty simple; just use ",["$","code","code-1",{"className":"opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"^"}]," to force the match to start at the start of the string, then look for the first ",["$","code","code-2",{"className":"opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"a"}],":"]}]
14:["$","$L10","pre-1",{"className":"my-2","children":"^a","language":"$undefined"}]
15:["$","$L10","pre-2",{"className":"my-2","children":"1. \"Warmup\"\n    This one's pretty straightforward.\n\nMatch on all of these:    But none of these:\n------------------------  ------------------------\nampasimenite              jasmone\nanchorable                decisivenesses\naconic                    backoff\nantistrophic              whitebark\nabrade                    physogastrism\narroya                    shavee\napoplex                   hanoverian\nayahs                     weatherstripped\narock                     naturalize\nanconoid                  lophotrichous\nanglophile                nonprecedential\nacalephan                 tjctf\namaze                     shepherdia\nadelphe                   waymark\nanno                      picnicker\namiable                   bottleholder\naliquid                   porule\nachromatin                diagraming\naircheck                  solifuge\nantigenically             phrenetically\n\nMaximum allowable length is 2\n\n> ^a","language":"$undefined"}]
16:["$","div","h3-1",{"className":"relative","children":[["$","span",null,{"id":"subtraction","className":"absolute -top-16"}],["$","a",null,{"className":"group flex gap-2 items-center text-inherit hover:underline decoration-1 underline-offset-4 decoration-secondary decoration-dotted text-3xl font-bold mt-10 mb-4 ","href":"#subtraction","children":[["$","h2",null,{"children":"Subtraction"}],["$","svg",null,{"stroke":"currentColor","fill":"none","strokeWidth":"2","viewBox":"0 0 24 24","strokeLinecap":"round","strokeLinejoin":"round","className":"hidden group-hover:block text-xl absolute pt-0.5 -left-7 stroke-[1.5px] text-secondary","children":["$undefined",[["$","path","0",{"d":"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71","children":"$undefined"}],["$","path","1",{"d":"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71","children":"$undefined"}]]],"style":{"color":"$undefined"},"height":"1em","width":"1em","xmlns":"http://www.w3.org/2000/svg"}]]}]]}]
17:["$","p","p-3",{"children":["The first regex relying on PCRE-style group-insertion shenanigans. We can take some inspiration from ",["$","a","a-0",{"href":"https://stackoverflow.com/questions/66813185/regex-to-validate-subtract-equations-like-abc-b-ac","children":"this StackOverflow"}],": essentially, we can split the first string of ",["$","code","code-0",{"className":"opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"x"}],"'s into two captured groups, with the second string of ",["$","code","code-1",{"className":"opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"x"}],"s being the first group and the resulting sum being the second."]}]
18:["$","$L10","pre-3",{"className":"my-2","children":"^(.*)(.*)-\\1=\\2$","language":"$undefined"}]
27:T7bd,2. "Subtraction"
    Think addition, but not.

Match on all of these:                    But none of these:
----------------------------------------  -------------------------------------------
xxxxxxxxxxxxx-xxx=xxxxxxxxxx              xxx-xxxx=xxxxxxxxxx
xxxxxxx-x=xxxxxx                          xxxxxxxxxxxx-xxxxxxxxx=xx
xxxxxxxxxxxxxxxx-xxxxxxxxxxxxx=xxx        xxxx-xxxxxxxxxxxxx=
x-x=                                      xxxxxxxxxxxxxxx-xxxxxxx=xxxxxxx
xxxx-xxxx=                                xxxxxxxxxxx-xxxxxxx=xxxxxxxxxxxxxx
xx-=xx                                    xxxxxxxxxxxxxx-xxx=xxxxxxxxxxxx
xxxxxxxxxxx-xxxxx=xxxxxx                  xxxx-xxxx=xxxxxxxxxxxxxxxxxx
xxxxxxxxxx-xxxxx=xxxxx                    xxxxxxxxxxxxxxx-xxx=xxxxxxxxxxx
-=                                        xxxxxxxxxxxxx-xxxxxxx=
xxxxxxxxxxxxxxxxx-xxxxxxxxxxx=xxxxxx      xxxxxxx-xxxxxxxx=xxxxxxxxxxx
xxxxxxxxxxxxx-xxxxxxxxxxxxx=              x-xxxxxxxxxxxxxxxxxxxx=
xxxxxxxxxxxxxxxxxx-xxxxxxxxxxxxxxx=xxx    xxxxxxxxxxxxxxx-xxxxxxxxxxxxxxx=xxxxxxxxxx
xxxxxxxxxxx-xxxxxxxxxxx=                  xxxxx-xxxxxxxxxx=xx
xxxxxxxxxxxxxxxxx-xxxxx=xxxxxxxxxxxx      xxxxxxxxxxx-xxxxxxxxxxxxxx=xxxxxx
xxxxxxxxx-xx=xxxxxxx                      xxxxxxxxxxxxx-=xxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxx-xxxxxxxxxxxx=xxxxxx    xxxxxxxx-xxxxxxxxxx=xxxxxxxxxxxxxxxxx
x-=x                                      xxxxxxx-xxxxxxx=xxxxxxxxxxxxxx
xxxxxxxx-xxxxx=xxx                        -xxxxxxxxxxxxxxxxxxxx=
xxxxxxxxxx-xxxxxx=xxxx                    xxxxxxxxxxxxxxxxxxxx-xxxxxxxxxxxxxxxx=x
xxxxxxxxxxxxxx-xxxxxx=xxxxxxxx            xxxxxxxx-xxxxxxxx=xxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxx-xxxxxxxxxxxxx=xxxxx    xxxxxx-xxxxxxxxxxxxxxxxxxx=xxxxxxxx
xxxxxxxxxxxxxxx-xxxx=xxxxxxxxxxx          xx-xxxxxxxxxxxxxxx=xx
xxxxxxxxxxxxxxxx-xxxxxxx=xxxxxxxxx        xxxxxxxx-xxxxxxxxxxxxxxxxxxxx=xxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxx-x=xxxxxxxxxxxxxxxxxx  xxxxxxxxx-xx=xxxxxxxxxxxxxxxxx

Maximum allowable length is 16

> ^(.*)(.*)-\1=\2$19:["$","$L10","pre-4",{"className":"my-2","children":"$27","language":"$undefined"}]
1a:["$","div","h3-2",{"className":"relative","children":[["$","span",null,{"id":"parity","className":"absolute -top-16"}],["$","a",null,{"className":"group flex gap-2 items-center text-inherit hover:underline decoration-1 underline-offset-4 decoration-secondary decoration-dotted text-3xl font-bold mt-10 mb-4 ","href":"#parity","children":[["$","h2",null,{"children":"Parity"}],["$","svg",null,{"stroke":"currentColor","fill":"none","strokeWidth":"2","viewBox":"0 0 24 24","strokeLinecap":"round","strokeLinejoin":"round","className":"hidden group-hover:block text-xl absolute pt-0.5 -left-7 stroke-[1.5px] text-secondary","children":["$undefined",[["$","path","0",{"d":"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71","children":"$undefined"}],["$","path","1",{"d":"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71","children":"$undefined"}]]],"style":{"color":"$undefined"},"height":"1em","width":"1em","xmlns":"http://www.w3.org/2000/svg"}]]}]]}]
1b:["$","p","p-4",{"children":["The first regex relying on PCRE recursion shenanigans. We can again take inspiration from ",["$","a","a-0",{"href":"https://stackoverflow.com/questions/546433/regular-expression-to-match-balanced-parentheses","children":"a StackOverflow post"}]," for this: ignoring the .NET solution using balancing groups, we can edit the recursive solution to use angled brackets and ignore text between brackets to trim down its length."]}]
1c:["$","$L10","pre-5",{"className":"my-2","children":"^(<(?1)*>)+$","language":"$undefined"}]
28:T8e9,3. "Parity"
    This one's supposed to be impossible in the general case.
    The tests will enforce a solution for the general case.

Match on all of these:                            But none of these:
------------------------------------------------  ------------------------------------------------
<>                                                <
<<>>                                              >
<><>                                              <>>
<<><>>                                            >><>>
<<<<>>>>                                          <><><<
<<<>>><>                                          <<>>><>
<<><><<>>>                                        <<>>>>><
<><<<><>>>                                        >><>>>><<
<<<><><>>>                                        <>><<>><><<<<>>><<
<<<<<>>><>>>                                      <<>>>>><>><<>><<><<
<<<<<<>>>>>>                                      >>>>><><><><<<>>><>>
<<<<<<<>>>>>>>                                    ><><<<><><>>>>>><<><<
<<<>><><<<>>>>                                    <<<<<><<<><>><>>><>>>><>>>
<<<<<<<<<<>>>>>>>>>>                              >>>><>>><><><<<<<>>><>><<><>>><><<>
<<<<<<<<<<>>>>>>>>>><>                            <>><><>><>><<><>><>>><><>>><><>><><>><
<><<<>><<>>><<<<>><>>>                            <<<><>>>>><<><<><><<<<>>><<<>>>>>>><>>>
<<><><><<<<<><<>>>>>><>>                          ><<>><<<<><><<<><>><<>><<><>>><>>>>>><<>
<<<<><>>><><><>><><><><>                          >>><<<<<<<<<<>>>><<<><<><>><<<><><><<<<>>
<<>><<>><<>><<<<<<<>>>>><>>>                      <<><>><<>><>>>>><>><><<><>>><<<<<><>><<<<><>
<<<<<<>>>>>><<<<<<<>>><>>>>>                      <>><<<><<><<<<<>>><><<<<<<<><><<>><><><<>>>>
<<<<>><><>>><<><<>><<<<>>><>>>                    ><><<<>>><<><<><>>><<<<>><>><><<>>><><<><<<<
<<<><<>><<<>><<<>>><>>>><<<>><>>                  ><><<<<><<<<<>><<><<><>>>><><<><><><>><<<><><
<><<><><><<<>>><<<>><>>><<<<><>>>>                >>><<>>><><<<<><><><<<<>>>><<<>>><>><<<<<<<<<>
<<<<<<>>><>><><><>><>><<<>><><<<>>>>              <>><><>>><<>>><>>><>>><<<<>>>><>>><<<<<>><>><>><
<<<>><><>><><<><><<<>>>><<<>>><<<><<>>>><><<<>>>  <>>>><<<><>><<><<<><<<><>>>>>><>>><>>>>><<<><<<>

Maximum allowable length is 12

> ^(<(?1)*>)+$1d:["$","$L10","pre-6",{"className":"my-2","children":"$28","language":"$undefined"}]
1e:["$","div","h3-3",{"className":"relative","children":[["$","span",null,{"id":"topsy-turvy","className":"absolute -top-16"}],["$","a",null,{"className":"group flex gap-2 items-center text-inherit hover:underline decoration-1 underline-offset-4 decoration-secondary decoration-dotted text-3xl font-bold mt-10 mb-4 ","href":"#topsy-turvy","children":[["$","h2",null,{"children":"Topsy Turvy"}],["$","svg",null,{"stroke":"currentColor","fill":"none","strokeWidth":"2","viewBox":"0 0 24 24","strokeLinecap":"round","strokeLinejoin":"round","className":"hidden group-hover:block text-xl absolute pt-0.5 -left-7 stroke-[1.5px] text-secondary","children":["$undefined",[["$","path","0",{"d":"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71","children":"$undefined"}],["$","path","1",{"d":"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71","children":"$undefined"}]]],"style":{"color":"$undefined"},"height":"1em","width":"1em","xmlns":"http://www.w3.org/2000/svg"}]]}]]}]
1f:["$","p","p-5",{"children":["Another recursive regex, this time finding palindromes. Because this is a well known / solved problem, we can just use the solution from ",["$","a","a-0",{"href":"https://stackoverflow.com/a/233326","children":"this StackOverflow answer"}]," to pass."]}]
20:["$","$L10","pre-7",{"className":"my-2","children":"^((.)(?1)\\2|.?)$","language":"$undefined"}]
21:["$","$L10","pre-8",{"className":"my-2","children":"4. \"Topsy Turvy\"\n    This one's another famously impossible regex challenge.\n    Have fun solving it!\n\nMatch on all of these:     But none of these:\n-------------------------  ------------------------\ni                          cashew\ndad                        hamleteer\nabba                       electromagnetic\nkayak                      zimbabwe\nrefer                      xerox\ncivic                      epiphanizing\npullup                     detected\nracecar                    tahinis\nrotator                    foolproof\ndetartrated                sailboat\nwassamassaw                racecars\ntattarrattat               redeemer\nsatireveritas              woodrow\ndogeeseseegod              bathtub\nneveroddoreven             butterfly\nmadaminedenimadam          scarabs\nanutforajaroftuna          alabama\nwasitacaroracatisaw        yamaha\namanaplanacanalpanama      engage\nsatorarepotenetoperarotas  nonattributiveness\n\nMaximum allowable length is 18\n\n> ^((.)(?1)\\2|.?)$","language":"$undefined"}]
22:["$","div","h3-4",{"className":"relative","children":[["$","span",null,{"id":"multiplication","className":"absolute -top-16"}],["$","a",null,{"className":"group flex gap-2 items-center text-inherit hover:underline decoration-1 underline-offset-4 decoration-secondary decoration-dotted text-3xl font-bold mt-10 mb-4 ","href":"#multiplication","children":[["$","h2",null,{"children":"Multiplication"}],["$","svg",null,{"stroke":"currentColor","fill":"none","strokeWidth":"2","viewBox":"0 0 24 24","strokeLinecap":"round","strokeLinejoin":"round","className":"hidden group-hover:block text-xl absolute pt-0.5 -left-7 stroke-[1.5px] text-secondary","children":["$undefined",[["$","path","0",{"d":"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71","children":"$undefined"}],["$","path","1",{"d":"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71","children":"$undefined"}]]],"style":{"color":"$undefined"},"height":"1em","width":"1em","xmlns":"http://www.w3.org/2000/svg"}]]}]]}]
23:["$","p","p-6",{"children":"Since this isn't exactly a \"well known regex problem\", we'll have to cook up a solution ourselves. We can leverage PCRE capture groups and recursion to capture the first operand, then \"paste\" it on the right of the equals for each character in the second. After a bit of fanagling, we can come up with"}]
24:["$","$L10","pre-9",{"className":"my-2","children":"^(x*)\\*(x(?2)\\1|=)$","language":"$undefined"}]
25:["$","p","p-7",{"children":"and get the flag:"}]
29:T801,5. "Multiplication"
    Seems self-explanatory.

Match on all of these:                       But none of these:
-------------------------------------------  ------------------------------------------
xxx*xxxxx=xxxxxxxxxxxxxxx                    x*x=xx
xxxxx*xxxx=xxxxxxxxxxxxxxxxxxxx              xxxxxxxx*xxxx=xxxxxxxx
xxxxx*xxx=xxxxxxxxxxxxxxx                    x*xxxxxxxx=xxxxxxx
xx*xx=xxxx                                   xxxxxxx*xxxxx=xxxxxxxxx
xx*xxxx=xxxxxxxx                             xxxxxxxx*xxx=xxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxx*xxxxxx=xxxxxxxxxxxxxxxxxx                xxxxx*xxxxx=xxxxxxxxxxxxxx
xxx*xxxxx=xxxxxxxxxxxxxxx                    xxx*xxxxxx=xxxx
xx*xxxxx=xxxxxxxxxx                          xx*xxxx=xxxxxxxxxx
xx*xxx=xxxxxx                                xxxx*xxxxx=xx
xxxxx*xxxxxx=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  xxx*xxx=xxx
x*xx=xx                                      xxxx*xxxxxxxx=xxxxxxxxxxxxxxxxxxxx
xxxxxx*xxxx=xxxxxxxxxxxxxxxxxxxxxxxx         *x=x
x*x=x                                        xxxxxx*xxxxxxx=xxxxxxxxxxxxxxxxxxxxxxxxx
xxx*xxx=xxxxxxxxx                            xx*xxxxxx=xxxxxxxxx
xxxx*xxxxxx=xxxxxxxxxxxxxxxxxxxxxxxx         xxxxxxxx*xxxxxx=xxxxxxxxxxxxxxxxxxxxxx
xxxx*xx=xxxxxxxx                             xxxx*xxxxxxx=xxxxxxxxxxxxxxxxxxxxxxxxxx
*x=                                          xxxxxxxx*xx=xxxxxxxxxxxxxxx
xxxxx*xxxxxx=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  x*xxxxxxx=x
xxx*xx=xxxxxx                                xx*x=x
xxxx*xxxxxx=xxxxxxxxxxxxxxxxxxxxxxxx         xx*xxxxx=xxxxxx

Maximum allowable length is 20

> ^(x*)\*(x(?2)\1|=)$


From the moment I understood the weakness of my code, it disgusted me. I craved the strength and certainty of ascii. I aspired to the purity of the Blessed Regex.

Your kind cling to your code, as if it will not have bugs and fail you. One day the crude boilerplate you call a script will wither, and you will beg my kind to save you. But I am already saved, for the Regex is immortal...

tjctf{even_in_death_I_serve_the_PCRE_Standard_3ceb7afc}26:["$","$L10","pre-10",{"className":"my-2","children":"$29","language":"$undefined"}]
9:{"metadata":[["$","title","0",{"children":"TJCTF 2024 — golf-hard | kevin.fish"}],["$","meta","1",{"name":"description","content":"regex below par? note that this challenge has five levels."}],["$","meta","2",{"property":"og:title","content":"TJCTF 2024 — golf-hard"}],["$","meta","3",{"property":"og:description","content":"regex below par? note that this challenge has five levels."}],["$","meta","4",{"name":"twitter:card","content":"summary"}],["$","meta","5",{"name":"twitter:title","content":"TJCTF 2024 — golf-hard"}],["$","meta","6",{"name":"twitter:description","content":"regex below par? note that this challenge has five levels."}]],"error":null,"digest":"$undefined"}
e:"$9:metadata"
