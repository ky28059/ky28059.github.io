1:"$Sreact.fragment"
2:I[10453,["/_next/static/chunks/b9afcb09c56609a6.js","/_next/static/chunks/59d5dd52dd9fcb16.js","/_next/static/chunks/0eb309e820c00a6d.js","/_next/static/chunks/a6b27ecf1b9e9188.js","/_next/static/chunks/39b99946d2be6a43.js"],"default"]
17:I[97367,["/_next/static/chunks/ff1a16fafef87110.js","/_next/static/chunks/b71c1cfea9076b4b.js"],"OutletBoundary"]
18:"$Sreact.suspense"
:HL["https://gist.github.com/assets/60120929/6ec32800-c9c9-4060-8925-c4cf550fbd5b","image"]
:HL["https://gist.github.com/assets/60120929/baae2b59-e268-4aaa-af1e-fcfb460a0537","image"]
:HL["https://gist.github.com/assets/60120929/ceaafc72-0440-4017-9d59-c2189679c084","image"]
:HL["https://gist.github.com/assets/60120929/e194b998-5ae2-4fa8-b41f-fd13851c147e","image"]
3:Tdcd, function parseNode(node, state, output) {
    // Give entity manager first crack at it.
    if (node.nodeType === Node.ELEMENT_NODE) {
      var entity = entityManager_.fromElement(node);
      if (entity) {
        output.currentLine.push(new firepad.Text(
            firepad.sentinelConstants.ENTITY_SENTINEL_CHARACTER,
            new firepad.Formatting(entity.toAttributes())
        ));
        return;
      }
    }

    switch (node.nodeType) {
      case Node.TEXT_NODE:
        // This probably isn't exactly right, but mostly works...
        var text = node.nodeValue.replace(/[ \n\t]+/g, ' ');
        output.currentLine.push(firepad.Text(text, state.textFormatting));
        break;
      case Node.ELEMENT_NODE:
        var style = node.getAttribute('style') || '';
        state = parseStyle(state, style);
        switch (node.nodeName.toLowerCase()) {
          case 'div':
          case 'h1':
          case 'h2':
          case 'h3':
          case 'p':
            output.newlineIfNonEmpty(state);
            parseChildren(node, state, output);
            output.newlineIfNonEmpty(state);
            break;
          case 'center':
            state = state.withAlign('center');
            output.newlineIfNonEmpty(state);
            parseChildren(node, state.withAlign('center'), output);
            output.newlineIfNonEmpty(state);
            break;
          case 'b':
          case 'strong':
            parseChildren(node, state.withTextFormatting(state.textFormatting.bold(true)), output);
            break;
          case 'u':
            parseChildren(node, state.withTextFormatting(state.textFormatting.underline(true)), output);
            break;
          case 'i':
          case 'em':
            parseChildren(node, state.withTextFormatting(state.textFormatting.italic(true)), output);
            break;
          case 's':
            parseChildren(node, state.withTextFormatting(state.textFormatting.strike(true)), output);
            break;
          case 'font':
            var face = node.getAttribute('face');
            var color = node.getAttribute('color');
            var size = parseInt(node.getAttribute('size'));
            if (face) { state = state.withTextFormatting(state.textFormatting.font(face)); }
            if (color) { state = state.withTextFormatting(state.textFormatting.color(color)); }
            if (size) { state = state.withTextFormatting(state.textFormatting.fontSize(size)); }
            parseChildren(node, state, output);
            break;
          case 'br':
            output.newline(state);
            break;
          case 'ul':
            output.newlineIfNonEmptyOrListItem(state);
            var listType = node.getAttribute('class') === 'firepad-todo' ? LIST_TYPE.TODO : LIST_TYPE.UNORDERED;
            parseChildren(node, state.withListType(listType).withIncreasedIndent(), output);
            output.newlineIfNonEmpty(state);
            break;
          case 'ol':
            output.newlineIfNonEmptyOrListItem(state);
            parseChildren(node, state.withListType(LIST_TYPE.ORDERED).withIncreasedIndent(), output);
            output.newlineIfNonEmpty(state);
            break;
          case 'li':
            parseListItem(node, state, output);
            break;
          case 'style': // ignore.
            break;
          default:
            parseChildren(node, state, output);
            break;
        }
        break;
      default:
        // Ignore other nodes (comments, etc.)
        break;
    }
  }0:{"buildId":"DfvEc75fs5QFxpmscM4-K","rsc":["$","$1","c",{"children":[["$","div",null,{"children":["$","main",null,{"className":"text-pretty max-w-5xl mx-auto text-sm [&_h1]:text-5xl [&_h1]:font-semibold [&_h1]:mb-8 [&_blockquote]:text-secondary [&_blockquote]:space-y-3 [&_blockquote]:border-l-4 [&_blockquote]:border-secondary [&_blockquote]:pl-5 [&_blockquote]:mb-5 [&>_p]:my-4 [&_img]:my-5 [&_ul]:list-disc [&_ul]:pl-6 [&_ol]:list-decimal [&_ol]:pl-6 [&_img]:rounded [&_li]:my-2","children":[["$","h1","h1-0",{"children":"GPN CTF 2024 â€” Letter to the editor"}],"\n",["$","blockquote","blockquote-0",{"children":["\n",["$","p","p-0",{"children":"Old software, good software:"}],"\n",["$","p","p-1",{"children":["Clone and pwn: ",["$","a","a-0",{"href":"https://github.com/FirebaseExtended/firepad","children":"https://github.com/FirebaseExtended/firepad"}]]}],"\n"]}],"\n",["$","p","p-0",{"children":"We're given a very minimal admin bot launcher page that gives us a URL to a demo Firepad."}],"\n",["$","p","p-1",{"children":["$","img","img-0",{"src":"https://gist.github.com/assets/60120929/6ec32800-c9c9-4060-8925-c4cf550fbd5b","alt":"image"}]}],"\n",["$","p","p-2",{"children":"Without any further details, it looks like we're meant to find a (likely XSS) vulnerability in the Firepad source code we can use on the admin to get the flag."}],"\n",["$","p","p-3",{"children":["Looking at the Firepad source code, we can find a ",["$","a","a-0",{"href":"https://github.com/FirebaseExtended/firepad/blob/master/lib/firepad.js#L287-L294","children":"function that lets us insert HTML strings into our pad"}],":"]}],"\n",["$","$L2","pre-0",{"className":"my-2","children":"  Firepad.prototype.insertHtml = function (index, html) {\n    var lines = firepad.ParseHtml(html, this.entityManager_);\n    this.insertText(index, lines);\n  };\n\n  Firepad.prototype.insertHtmlAtCursor = function (html) {\n    this.insertHtml(this.codeMirror_.indexFromPos(this.codeMirror_.getCursor()), html);\n  };","language":"js"}],"\n",["$","p","p-4",{"children":["Looking at ",["$","a","a-0",{"href":"https://github.com/FirebaseExtended/firepad/blob/master/lib/parse-html.js#L104-L215","children":"how this HTML is parsed"}],","]}],"\n",["$","$L2","pre-1",{"className":"my-2","children":"  var entityManager_;\n  function parseHtml(html, entityManager) {\n    // Create DIV with HTML (as a convenient way to parse it).\n    var div = (firepad.document || document).createElement('div');\n    div.innerHTML = html;\n\n    // HACK until I refactor this.\n    entityManager_ = entityManager;\n\n    var output = new ParseOutput();\n    var state = new ParseState();\n    parseNode(div, state, output);\n\n    return output.lines;\n  }","language":"js"}],"\n",["$","$L2","pre-2",{"className":"my-2","children":"$3","language":"js"}],"\n","$L4","\n","$L5","\n","$L6","\n","$L7","\n","$L8","\n","$L9","\n","$La","\n","$Lb","\n","$Lc","\n","$Ld","\n","$Le","\n","$Lf","\n","$L10","\n","$L11"]}]}],["$L12","$L13","$L14","$L15"],"$L16"]}],"loading":null,"isPartial":false}
4:["$","p","p-5",{"children":"the rendering process seems to be as follows:"}]
5:["$","ol","ol-0",{"children":["\n",["$","li","li-0",{"children":["Insert the HTML into a dummy ",["$","code","code-0",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"div"}]," to let the browser parse it as DOM nodes."]}],"\n",["$","li","li-1",{"children":"If the node is of a type the \"entity manager\" can support, use that to render it instead."}],"\n",["$","li","li-2",{"children":"Otherwise, treat select tags as prompts to enable / disable text formatting options in the parser state, ignoring all other tags and attributes."}],"\n"]}]
6:["$","p","p-6",{"children":["Looking at the ",["$","a","a-0",{"href":"https://github.com/FirebaseExtended/firepad/blob/master/lib/entity-manager.js#L6-L35","children":"entity manager"}],","]}]
7:["$","$L2","pre-3",{"className":"my-2","children":"  function EntityManager() {\n    this.entities_ = {};\n\n    var attrs = ['src', 'alt', 'width', 'height', 'style', 'class'];\n    this.register('img', {\n      render: function(info) {\n        utils.assert(info.src, \"image entity should have 'src'!\");\n        var attrs = ['src', 'alt', 'width', 'height', 'style', 'class'];\n        var html = '<img ';\n        for(var i = 0; i < attrs.length; i++) {\n          var attr = attrs[i];\n          if (attr in info) {\n            html += ' ' + attr + '=\"' + info[attr] + '\"';\n          }\n        }\n        html += \">\";\n        return html;\n      },\n      fromElement: function(element) {\n        var info = {};\n        for(var i = 0; i < attrs.length; i++) {\n          var attr = attrs[i];\n          if (element.hasAttribute(attr)) {\n            info[attr] = element.getAttribute(attr);\n          }\n        }\n        return info;\n      }\n    });\n  }","language":"js"}]
8:["$","p","p-7",{"children":["the only tag its set up to parse are ",["$","code","code-0",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"img"}]," tags. Furthermore, it has an allowlist of attributes that it renders selectively: though trying"]}]
9:["$","$L2","pre-4",{"className":"my-2","children":"firepad.insertHtmlAtCursor('<img src=x onerror=\"...\">')","language":"js"}]
a:["$","p","p-8",{"children":["looks like it works, it only results in self-XSS as the ",["$","code","code-0",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"onerror"}]," attribute is scrubbed when rendered on another screen."]}]
b:["$","p","p-9",{"children":["$","img","img-0",{"src":"https://gist.github.com/assets/60120929/baae2b59-e268-4aaa-af1e-fcfb460a0537","alt":"image"}]}]
c:["$","p","p-10",{"children":"Instead, we can get the same general attack to work using attribute injection. Because the entity manager generates the final HTML string using string concatenation, if we construct a payload like"}]
d:["$","$L2","pre-5",{"className":"my-2","children":"firepad.insertHtmlAtCursor('<img src=x width=\\'300px\" onerror=\"...\"\\'>')","language":"js"}]
e:["$","p","p-11",{"children":["we can get the ",["$","code","code-0",{"className":"font-jetbrains opacity-75 bg-black/10 dark:bg-black/30 rounded px-1.5 py-1 text-[0.9em]","children":"onerror"}]," attribute to render by smuggling it inside another attribute, giving us XSS."]}]
f:["$","p","p-12",{"children":"Since there's no source for the admin bot, it's a bit unclear what we're meant to exfiltrate from here. However, we can just try both cookies and localStorage to get the flag:"}]
10:["$","p","p-13",{"children":["$","img","img-0",{"src":"https://gist.github.com/assets/60120929/ceaafc72-0440-4017-9d59-c2189679c084","alt":"image"}]}]
11:["$","p","p-14",{"children":["$","img","img-0",{"src":"https://gist.github.com/assets/60120929/e194b998-5ae2-4fa8-b41f-fd13851c147e","alt":"image"}]}]
12:["$","script","script-0",{"src":"/_next/static/chunks/59d5dd52dd9fcb16.js","async":true}]
13:["$","script","script-1",{"src":"/_next/static/chunks/0eb309e820c00a6d.js","async":true}]
14:["$","script","script-2",{"src":"/_next/static/chunks/a6b27ecf1b9e9188.js","async":true}]
15:["$","script","script-3",{"src":"/_next/static/chunks/39b99946d2be6a43.js","async":true}]
16:["$","$L17",null,{"children":["$","$18",null,{"name":"Next.MetadataOutlet","children":"$@19"}]}]
19:null
